@model EMS.WebApp.Data.MedBase
@if (ViewBag.Error != null)
{
    <div class="alert alert-warning">
        @ViewBag.Error
    </div>
}
<form asp-action="@(Model.BaseId == 0 ? "Create" : "Edit")" method="post" id="medBaseForm">
    @Html.AntiForgeryToken()
    <input asp-for="BaseId" type="hidden" />

    <div class="row g-3">
        <div class="col-md-12">
            <label asp-for="BaseName" class="form-label">Base Name <span class="text-danger">*</span></label>
            <input asp-for="BaseName" class="form-control rounded-2 glass" id="baseNameInput" maxlength="120" placeholder="Enter medical base name" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="BaseName" class="text-danger" id="baseNameValidation"></span>
                <small class="text-muted">
                    <span id="baseNameCharCount">0</span>/120 characters
                </small>
            </div>
        </div>

        <div class="col-md-12">
            <label asp-for="BaseDesc" class="form-label">Base Description</label>
            <textarea asp-for="BaseDesc" class="form-control glass rounded-2" rows="3" id="baseDescTextarea" maxlength="250" placeholder="Enter base description (optional)"></textarea>
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="BaseDesc" class="text-danger" id="baseDescValidation"></span>
                <small class="text-muted">
                    <span id="charCount">0</span>/250 characters
                </small>
            </div>
        </div>
    </div>

    <div class="modal-footer mt-3">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary" id="submitBtn">
            @(Model.BaseId == 0 ? "Save" : "Update")
        </button>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function() {
            // Form elements
            const baseNameInput = $('#baseNameInput');
            const baseDescTextarea = $('#baseDescTextarea');
            const form = $('#medBaseForm');
            const submitBtn = $('#submitBtn');
            const baseId = $('input[name="BaseId"]').val();

            // Character count elements
            const baseNameCharCount = $('#baseNameCharCount');
            const charCount = $('#charCount');

            // Validation flags
            let isCheckingName = false;

            // Initialize validation
            form.removeData("validator");
            form.removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);

            // Security patterns to check for
            const dangerousPatterns = [
                /<script[^>]*>.*?<\/script>/gi,
                /javascript:/gi,
                /vbscript:/gi,
                /on\w+\s*=/gi,
                /<iframe/gi,
                /<object/gi,
                /<embed/gi,
                /<form/gi,
                /eval\s*\(/gi,
                /expression\s*\(/gi
            ];

            // Function to check for dangerous input
            function containsDangerousInput(text) {
                if (!text) return false;
                return dangerousPatterns.some(pattern => pattern.test(text));
            }

            // Character count functions
            function updateBaseNameCharCount() {
                const currentLength = baseNameInput.val().length;
                baseNameCharCount.text(currentLength);
                baseNameCharCount.removeClass('text-warning text-danger');
                if (currentLength > 90 && currentLength < 120) {
                    baseNameCharCount.addClass('text-warning');
                } else if (currentLength >= 120) {
                    baseNameCharCount.addClass('text-danger');
                }
            }

            function updateCharCount() {
                const currentLength = baseDescTextarea.val().length;
                charCount.text(currentLength);
                charCount.removeClass('text-warning text-danger');
                if (currentLength > 200 && currentLength < 250) {
                    charCount.addClass('text-warning');
                } else if (currentLength >= 250) {
                    charCount.addClass('text-danger');
                }
            }

            // Validation functions
            function validateBaseName() {
                const baseName = baseNameInput.val().trim();
                const validationSpan = $('#baseNameValidation');
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                baseNameInput.removeClass('is-invalid');

                if (!baseName) {
                    validationSpan.text('Base Name is required.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    baseNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (baseName.length < 2) {
                    validationSpan.text('Base Name must be at least 2 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    baseNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (baseName.length > 120) {
                    validationSpan.text('Base Name cannot exceed 120 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    baseNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(baseName)) {
                    validationSpan.text('Base Name contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    baseNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\s\-_\.\(\)\[\]]+$/.test(baseName)) {
                    validationSpan.text('Base Name can only contain letters, numbers, spaces, hyphens, underscores, dots, parentheses, and brackets.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    baseNameInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            function validateDescription() {
                const description = baseDescTextarea.val();
                const validationSpan = $('#baseDescValidation');
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                baseDescTextarea.removeClass('is-invalid');

                if (description && description.length > 250) {
                    validationSpan.text('Base Description cannot exceed 250 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    baseDescTextarea.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(description)) {
                    validationSpan.text('Base Description contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    baseDescTextarea.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            // Real-time validation for base name uniqueness
            function checkBaseNameUniqueness() {
                const baseName = baseNameInput.val().trim();
                const validationSpan = $('#baseNameValidation');

                if (!baseName || !validateBaseName()) {
                    updateSubmitButton();
                    return;
                }

                if (isCheckingName) return;

                isCheckingName = true;
                submitBtn.prop('disabled', true);

                $.post('@Url.Action("CheckBaseNameExists", "MedBase")', {
                    baseName: baseName,
                    baseId: baseId || null
                })
                .done(function(response) {
                    if (response.exists) {
                        validationSpan.text('A medical base with this name already exists. Please choose a different name.')
                                     .addClass('field-validation-error text-danger')
                                     .show();
                        baseNameInput.addClass('is-invalid');
                        submitBtn.prop('disabled', true);
                    } else {
                        if (validateBaseName()) {
                            validationSpan.text('').removeClass('field-validation-error').hide();
                            baseNameInput.removeClass('is-invalid');
                        }
                        updateSubmitButton();
                    }
                })
                .fail(function() {
                    console.log('Error checking base name uniqueness');
                    updateSubmitButton();
                })
                .always(function() {
                    isCheckingName = false;
                });
            }

            function updateSubmitButton() {
                const hasErrors = $('.field-validation-error:visible').length > 0 ||
                                $('.is-invalid').length > 0 ||
                                isCheckingName;
                submitBtn.prop('disabled', hasErrors);
            }

            // Event handlers
            baseNameInput.on('input keyup paste', function() {
                updateBaseNameCharCount();
                validateBaseName();
                updateSubmitButton();
            });

            baseDescTextarea.on('input keyup paste', function() {
                updateCharCount();
                validateDescription();
                updateSubmitButton();
            });

            // Debounced base name uniqueness check
            let nameCheckTimeout;
            baseNameInput.on('input keyup', function() {
                clearTimeout(nameCheckTimeout);
                nameCheckTimeout = setTimeout(checkBaseNameUniqueness, 800);
            });

            // Initialize on page load
            updateBaseNameCharCount();
            updateCharCount();
            validateBaseName();
            validateDescription();
            updateSubmitButton();

            // Prevent form submission if validation fails
            form.on('submit', function(e) {
                if (!validateBaseName() || !validateDescription() || isCheckingName) {
                    e.preventDefault();
                    return false;
                }

                // Final check for any visible errors
                if ($('.field-validation-error:visible').length > 0) {
                    e.preventDefault();
                    return false;
                }

                // Double-check for dangerous input before submission
                const baseName = baseNameInput.val().trim();
                const description = baseDescTextarea.val();

                if (containsDangerousInput(baseName) || containsDangerousInput(description)) {
                    e.preventDefault();
                    alert('Invalid input detected. Please remove any script tags or unsafe characters.');
                    return false;
                }
            });

            // Prevent pasting of dangerous content
            function handleDangerousPaste(input, inputName) {
                input.on('paste', function(e) {
                    setTimeout(function() {
                        const pastedContent = input.val();
                        if (containsDangerousInput(pastedContent)) {
                            input.val('');
                            alert('Pasted content in ' + inputName + ' contains unsafe characters and has been removed.');
                        }
                    }, 10);
                });
            }

            handleDangerousPaste(baseNameInput, 'Base Name');
            handleDangerousPaste(baseDescTextarea, 'Base Description');
        });
    </script>
}