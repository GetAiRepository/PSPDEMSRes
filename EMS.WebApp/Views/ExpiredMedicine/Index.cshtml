@{
    ViewData["Title"] = "Expired Medicines Management";
}

<!-- Statistics Cards -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card bg-warning text-dark">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="fas fa-exclamation-triangle"></i> Pending Disposal
                </h5>
                <h3 class="card-text" id="pendingCount">Loading...</h3>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-success text-white">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="fas fa-check-circle"></i> Disposed
                </h5>
                <h3 class="card-text" id="disposedCount">Loading...</h3>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <!-- Action Buttons -->
        <div class="d-flex justify-content-between mb-3">

            <div>
                <button id="btnSyncExpired" class="btn btn-primary me-2">
                    <i class="fas fa-sync"></i> Sync Expired Medicines
                </button>
                <button id="btnBulkIssue" class="btn btn-danger me-2" disabled>
                    <i class="fas fa-biohazard"></i> Bulk Issue to Biomedical Waste
                </button>
                <button id="btnPrintSelected" class="btn btn-success" disabled>
                    <i class="fas fa-print"></i> Print Selected
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Filter Tabs -->
<ul class="nav nav-tabs mb-3" id="statusTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="pending-tab" data-status="pending" type="button" role="tab">
            <i class="fas fa-clock"></i> Pending Disposal
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="disposed-tab" data-status="disposed" type="button" role="tab">
            <i class="fas fa-check"></i> Disposed Items
        </button>
    </li>
</ul>

<!-- Alert for warnings -->
<div class="alert alert-warning" role="alert" id="pendingAlert">
    <i class="fas fa-exclamation-triangle"></i>
    <strong>Warning:</strong> The medicines listed below have expired and need to be issued to biomedical waste for proper disposal.
    <br><small><strong>Note:</strong> Medicine type must be selected (Solid, Liquid, or Gel) before disposal.</small>
</div>

<div class="alert alert-success" role="alert" id="disposedAlert" style="display: none;">
    <i class="fas fa-check-circle"></i>
    <strong>Information:</strong> The medicines listed below have been properly disposed of to biomedical waste.
</div>

<!-- NEW: Validation Alert -->
<div class="alert alert-info alert-dismissible fade" role="alert" id="validationAlert" style="display: none;">
    <i class="fas fa-info-circle"></i>
    <strong>Action Required:</strong> <span id="validationMessage"></span>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

<!-- Main Table with Updated Columns -->
<table id="tblExpiredMedicines" class="table table-striped table-bordered">
    <thead>
        <tr>
            <th><input type="checkbox" id="selectAll" title="Select All"></th>
            <th>SI.No</th>
            <th>Medicine Name</th>
            <th>Company</th>
            <th>Type</th>
            <th>Batch Number</th>
            <th>Vendor Code</th>
            <th>Expired On</th>
            <th>Qty Expired</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<!-- Details Modal -->
<div class="modal fade" id="modalDetails" tabindex="-1" aria-labelledby="modalDetailsLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalDetailsLabel">
                    <i class="fas fa-info-circle"></i> Expired Medicine Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalDetailsContent">
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            console.log('Initializing Expired Medicine Management...');

            let currentStatus = 'pending';
            let tbl;
            let medicineTypes = [];

            // Load medicine types
            console.log('Loading medicine types...');
            $.get('@Url.Action("GetMedicineTypes", "ExpiredMedicine")')
                .done(function(response) {
                    console.log('Medicine types response:', response);
                    if (response.success) {
                        medicineTypes = response.data;
                        console.log('Medicine types loaded successfully:', medicineTypes);
                    } else {
                        console.error('Failed to load medicine types:', response.message);
                    }
                })
                .fail(function(xhr, status, error) {
                    console.error('Medicine types request failed:', error);
                });

            // Reusable function for badge click functionality
            function handleBadgeClick($badge) {
                const id = $badge.data('id');
                const currentType = $badge.data('type');

                console.log('handleBadgeClick called with:', { id: id, currentType: currentType });

                if (medicineTypes.length === 0) {
                    console.error('Medicine types not loaded yet');
                    showAlert('error', 'Medicine types not loaded. Please refresh the page.');
                    return;
                }

                // Prevent multiple edits
                if ($badge.hasClass('editing')) {
                    console.log('Badge already being edited');
                    return;
                }

                $badge.addClass('editing');

                // Create dropdown
                let dropdown = '<select class="form-select form-select-sm medicine-type-dropdown" data-id="' + id + '" style="min-width: 180px;">';
                medicineTypes.forEach(function(type) {
                    const selected = type.value === currentType ? 'selected' : '';
                    dropdown += `<option value="${type.value}" ${selected}>${type.text}</option>`;
                });
                dropdown += '</select>';

                console.log('Replacing badge with dropdown');

                // Replace badge with dropdown
                $badge.replaceWith(dropdown);

                // Focus on dropdown
                const $newDropdown = $('.medicine-type-dropdown[data-id="' + id + '"]');
                $newDropdown.focus();

                console.log('Dropdown created and focused');
            }

            // Test database connectivity first
            $.get('@Url.Action("TestDatabase", "ExpiredMedicine")')
                .done(function(response) {
                    console.log('Database test response:', response);
                    if (response.success) {
                        console.log('Database connection successful');
                        initializeDataTable();
                        loadStatistics();
                    } else {
                        console.error('Database test failed:', response.message);
                        alert('Database connection failed: ' + response.message);
                    }
                })
                .fail(function(xhr, status, error) {
                    console.error('Database test request failed:', error);
                    console.error('Status:', status);
                    console.error('Response:', xhr.responseText);

                    // Try to initialize anyway
                    console.log('Attempting to initialize DataTable despite database test failure...');
                    initializeDataTable();
                    loadStatistics();
                });

            function initializeDataTable() {
                console.log('Initializing DataTable...');

                tbl = $('#tblExpiredMedicines').DataTable({
                    processing: true,
                    serverSide: false,
                    ajax: {
                        url: '@Url.Action("LoadData", "ExpiredMedicine")',
                        type: 'GET',
                        data: function(d) {
                            console.log('Sending request with status:', currentStatus);
                            return { status: currentStatus };
                        },
                        dataSrc: function(json) {
                            console.log('DataTable received response:', json);

                            if (json.error) {
                                console.error('Server returned error:', json.error);
                                if (json.details) {
                                    console.error('Error details:', json.details);
                                }
                                alert('Error loading data: ' + json.error + (json.details ? '\nDetails: ' + json.details : ''));
                                return [];
                            }

                            if (json.data && Array.isArray(json.data)) {
                                console.log('Successfully loaded', json.data.length, 'records');
                                return json.data;
                            } else {
                                console.error('Invalid data format received:', json);
                                alert('Invalid data format received from server');
                                return [];
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('DataTable AJAX Error:');
                            console.error('Status:', status);
                            console.error('Error:', error);
                            console.error('Response Text:', xhr.responseText);
                            console.error('Status Code:', xhr.status);

                            let errorMessage = 'Failed to load data. ';
                            try {
                                let response = JSON.parse(xhr.responseText);
                                if (response.error) {
                                    errorMessage += response.error;
                                }
                                if (response.details) {
                                    errorMessage += '\nDetails: ' + response.details;
                                }
                            } catch (e) {
                                if (xhr.status === 404) {
                                    errorMessage += 'Controller action not found (404).';
                                } else if (xhr.status === 500) {
                                    errorMessage += 'Server error (500). Check server logs.';
                                } else if (xhr.status === 401) {
                                    errorMessage += 'Unauthorized (401). Please login.';
                                } else {
                                    errorMessage += `Status: ${xhr.status}, Error: ${error}`;
                                }
                            }

                            alert(errorMessage);
                        }
                    },
                    columns: [
                        {
                            data: 'expiredMedicineId',
                            render: function(data, type, row) {
                                if (currentStatus === 'pending') {
                                    // NEW: Add data attributes for validation
                                    return `<input type="checkbox" class="item-checkbox"
                                           value="${data}"
                                           data-can-dispose="${row.canDispose || false}"
                                           data-medicine-name="${row.medicineName}"
                                           data-batch="${row.batchNumber}"
                                           data-type="${row.typeOfMedicine}">`;
                                }
                                return '';
                            },
                            orderable: false
                        },
                        { data: 'slNo', orderable: false },
                        { data: 'medicineName' },
                        { data: 'companyName' },
                        {
                            data: 'typeOfMedicine',
                            render: function(data, type, row) {
                                if (currentStatus === 'pending') {
                                    // NEW: Add visual indicator for items that need type selection
                                    let additionalClass = '';
                                    let title = 'Click to edit type';

                                    if (data === 'Select Type of Medicine') {
                                        additionalClass = ' border border-danger';
                                        title = 'REQUIRED: Click to select medicine type before disposal';
                                    }

                                    return `<span class="badge ${row.typeBadgeClass} medicine-type-badge${additionalClass}"
                                           data-id="${row.expiredMedicineId}"
                                           data-type="${data}"
                                           style="cursor: pointer; user-select: none;"
                                           title="${title}">
                                           ${data === 'Select Type of Medicine' ? '<i class="fas fa-exclamation-triangle"></i> ' : ''}${data}
                                           </span>`;
                                } else {
                                    return `<span class="badge ${row.typeBadgeClass}">${data}</span>`;
                                }
                            },
                            orderable: true,
                            className: 'text-center'
                        },
                        { data: 'batchNumber' },
                        { data: 'vendorCode' },
                        {
                            data: 'expiredOn',
                            type: 'date'
                        },
                        {
                            data: 'qtyExpired',
                            type: 'num'
                        },
                        {
                            data: 'expiredMedicineId',
                            render: function(data, type, row) {
                                let buttons = `<button class="btn btn-sm btn-info me-1" onclick="viewDetails(${data})" title="View Details">
                                                  <i class="fas fa-eye"></i> View
                                               </button>`;

                                if (currentStatus === 'pending') {
                                    // NEW: Disable dispose button if type not selected
                                    const canDispose = row.canDispose || false;
                                    const disabledClass = canDispose ? '' : 'disabled';
                                    const disabledAttr = canDispose ? '' : 'disabled="disabled"';
                                    const title = canDispose ? 'Issue to Biomedical Waste' : 'Please select medicine type first';

                                    buttons += `<button class="btn btn-sm btn-danger ${disabledClass}"
                                               onclick="issueToWaste(${data}, '${row.medicineName}', '${row.batchNumber}', '${row.typeOfMedicine}')"
                                               title="${title}" ${disabledAttr}>
                                                   <i class="fas fa-biohazard"></i> Dispose
                                               </button>`;
                                }

                                return buttons;
                            },
                            orderable: false
                        }
                    ],
                    pageLength: 25,
                    responsive: true,
                    language: {
                        emptyTable: "No expired medicines found",
                        processing: "Loading expired medicines...",
                        loadingRecords: "Loading...",
                        zeroRecords: "No matching records found"
                    },
                    order: [[6, 'asc']], // Order by expired date (ascending - oldest first)
                    drawCallback: function(settings) {
                        console.log('DataTable draw completed. Rows:', settings.aoData.length);

                        // Re-attach click handlers after DataTable redraw
                        $('.medicine-type-badge').off('click').on('click', function(e) {
                            e.preventDefault();
                            e.stopPropagation();

                            console.log('Badge clicked:', $(this).data());
                            handleBadgeClick($(this));
                        });

                        console.log('Click handlers attached to', $('.medicine-type-badge').length, 'badges');

                        // NEW: Update checkbox states based on disposal eligibility
                        updateCheckboxStates();
                    }
                });
            }

            // NEW: Function to update checkbox states and bulk button availability
            function updateCheckboxStates() {
                const $checkboxes = $('.item-checkbox');
                let eligibleCount = 0;
                let totalSelected = 0;

                $checkboxes.each(function() {
                    const $checkbox = $(this);
                    const canDispose = $checkbox.data('can-dispose') === true;
                    const isChecked = $checkbox.is(':checked');

                    if (isChecked) {
                        totalSelected++;
                        if (canDispose) {
                            eligibleCount++;
                        }
                    }

                    // Style checkbox based on eligibility
                    if (!canDispose) {
                        $checkbox.closest('tr').addClass('table-warning');
                        $checkbox.attr('title', 'Medicine type must be selected before disposal');
                    } else {
                        $checkbox.closest('tr').removeClass('table-warning');
                        $checkbox.attr('title', 'Ready for disposal');
                    }
                });

                // Update bulk button states
                $('#btnBulkIssue').prop('disabled', eligibleCount === 0);
                $('#btnPrintSelected').prop('disabled', totalSelected === 0);

                // Show validation message if some items are selected but not eligible
                if (totalSelected > 0 && eligibleCount < totalSelected) {
                    const ineligibleCount = totalSelected - eligibleCount;
                    showValidationAlert(`${ineligibleCount} of ${totalSelected} selected items need medicine type selection before disposal.`);
                } else {
                    hideValidationAlert();
                }
            }

            // NEW: Show validation alert
            function showValidationAlert(message) {
                $('#validationMessage').text(message);
                $('#validationAlert').removeClass('fade').addClass('show').show();
            }

            // NEW: Hide validation alert
            function hideValidationAlert() {
                $('#validationAlert').removeClass('show').addClass('fade').hide();
            }

            // Inline editing for medicine type
            $(document).on('click', '.medicine-type-badge', function(e) {
                e.preventDefault();
                e.stopPropagation();

                console.log('Medicine type badge clicked'); // Debug log

                const $badge = $(this);
                const id = $badge.data('id');
                const currentType = $badge.data('type');

                console.log('Badge data:', { id: id, currentType: currentType }); // Debug log

                // Prevent multiple edits
                if ($badge.hasClass('editing')) {
                    return;
                }

                $badge.addClass('editing');

                // Create dropdown
                let dropdown = '<select class="form-select form-select-sm medicine-type-dropdown" data-id="' + id + '" style="min-width: 180px;">';
                medicineTypes.forEach(function(type) {
                    const selected = type.value === currentType ? 'selected' : '';
                    dropdown += `<option value="${type.value}" ${selected}>${type.text}</option>`;
                });
                dropdown += '</select>';

                console.log('Replacing badge with dropdown'); // Debug log

                // Replace badge with dropdown
                $badge.replaceWith(dropdown);

                // Focus on dropdown
                $('.medicine-type-dropdown[data-id="' + id + '"]').focus();
            });

            // Handle medicine type change
            $(document).on('change', '.medicine-type-dropdown', function() {
                const $dropdown = $(this);
                const id = $dropdown.data('id');
                const newType = $dropdown.val();

                console.log('Medicine type changed:', { id: id, newType: newType });

                // Show loading state
                $dropdown.prop('disabled', true);

                // Update via AJAX
                $.post('@Url.Action("UpdateMedicineType", "ExpiredMedicine")', {
                    id: id,
                    typeOfMedicine: newType
                })
                .done(function(response) {
                    console.log('Update response:', response);
                    if (response.success) {
                        // Replace dropdown with updated badge
                        let additionalClass = '';
                        let title = 'Click to edit type';

                        if (response.typeOfMedicine === 'Select Type of Medicine') {
                            additionalClass = ' border border-danger';
                            title = 'REQUIRED: Click to select medicine type before disposal';
                        }

                        const newBadge = `<span class="badge ${response.badgeClass} medicine-type-badge${additionalClass}"
                                         data-id="${id}"
                                         data-type="${response.typeOfMedicine}"
                                         style="cursor: pointer; user-select: none;"
                                         title="${title}">
                                         ${response.typeOfMedicine === 'Select Type of Medicine' ? '<i class="fas fa-exclamation-triangle"></i> ' : ''}${response.typeOfMedicine}</span>`;
                        $dropdown.replaceWith(newBadge);

                        // NEW: Update corresponding checkbox data
                        $(`.item-checkbox[value="${id}"]`).attr('data-can-dispose', response.canDispose);

                        // Re-attach click handler to new badge
                        $('.medicine-type-badge[data-id="' + id + '"]').off('click').on('click', function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            handleBadgeClick($(this));
                        });

                        showAlert('success', response.message);

                        // NEW: Update UI states
                        updateCheckboxStates();
                    } else {
                        showAlert('error', response.message);
                        // Revert to original
                        if (tbl) tbl.ajax.reload();
                    }
                })
                .fail(function(xhr, status, error) {
                    console.error('Update failed:', error);
                    showAlert('error', 'Failed to update medicine type');
                    // Revert to original
                    if (tbl) tbl.ajax.reload();
                })
                .always(function() {
                    $dropdown.prop('disabled', false);
                });
            });

            // Handle click outside dropdown to cancel edit
            $(document).on('click', function(e) {
                if (!$(e.target).hasClass('medicine-type-dropdown')) {
                    $('.medicine-type-dropdown').each(function() {
                        const $dropdown = $(this);
                        const id = $dropdown.data('id');
                        const originalType = $dropdown.find('option:selected').text();

                        // Find the original badge class
                        let badgeClass = 'bg-secondary';
                        medicineTypes.forEach(function(type) {
                            if (type.value === originalType) {
                                badgeClass = type.badgeClass;
                            }
                        });

                        let additionalClass = '';
                        let title = 'Click to edit type';

                        if (originalType === 'Select Type of Medicine') {
                            additionalClass = ' border border-danger';
                            title = 'REQUIRED: Click to select medicine type before disposal';
                        }

                        const originalBadge = `<span class="badge ${badgeClass} medicine-type-badge${additionalClass}"
                                             data-id="${id}"
                                             data-type="${originalType}"
                                             style="cursor: pointer;"
                                             title="${title}">
                                             ${originalType === 'Select Type of Medicine' ? '<i class="fas fa-exclamation-triangle"></i> ' : ''}${originalType}</span>`;
                        $dropdown.replaceWith(originalBadge);
                    });
                }
            });

            function loadStatistics() {
                console.log('Loading statistics...');

                $.get('@Url.Action("GetStatistics", "ExpiredMedicine")')
                    .done(function(response) {
                        console.log('Statistics response:', response);
                        if (response.success && response.data) {
                            $('#pendingCount').text(response.data.pendingDisposal || 0);
                            $('#disposedCount').text(response.data.disposed || 0);
                            $('#criticalCount').text(response.data.criticalCount || 0);
                            $('#totalValue').text('₹' + (response.data.totalValue || 0).toLocaleString());
                        } else {
                            console.error('Statistics error:', response.message || 'Unknown error');
                            setErrorCounts();
                        }
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Statistics AJAX error:', status, error);
                        console.error('Response:', xhr.responseText);
                        setErrorCounts();
                    });
            }

            function setErrorCounts() {
                $('#pendingCount').text('Error');
                $('#disposedCount').text('Error');
                $('#criticalCount').text('Error');
                $('#totalValue').text('Error');
            }

            // Action button functions
            window.viewDetails = function(id) {
                $.get(`@Url.Action("Details", "ExpiredMedicine")/${id}`)
                    .done(function(html) {
                        $('#modalDetailsContent').html(html);
                        $('#modalDetails').modal('show');
                    })
                    .fail(function(xhr, status, error) {
                        console.error('View details error:', error);
                        alert('Error loading details: ' + error);
                    });
            };

            // NEW: Enhanced issueToWaste function with validation
            window.issueToWaste = function(id, medicineName, batchNumber, typeOfMedicine) {
                // Client-side validation
                if (typeOfMedicine === 'Select Type of Medicine' || !typeOfMedicine) {
                    showAlert('warning', `Please select a medicine type (Solid, Liquid, or Gel) for "${medicineName}" (Batch: ${batchNumber}) before disposal.`);

                    // Highlight the medicine type badge
                    const $badge = $(`.medicine-type-badge[data-id="${id}"]`);
                    $badge.addClass('animate__animated animate__pulse').removeClass('animate__pulse');
                    setTimeout(() => $badge.removeClass('animate__animated animate__pulse'), 1000);

                    return;
                }

                if (!confirm(`Are you sure you want to issue "${medicineName}" (Batch: ${batchNumber}) to biomedical waste?\n\nThis action cannot be undone.`)) {
                    return;
                }

                $.post('@Url.Action("IssueToBiomedicalWaste", "ExpiredMedicine")', { id: id })
                    .done(function(response) {
                        if (response.success) {
                            showAlert('success', response.message);
                            if (typeof tbl !== 'undefined') tbl.ajax.reload();
                            if (typeof loadStatistics !== 'undefined') loadStatistics();
                        } else {
                            if (response.requiresTypeSelection) {
                                showAlert('warning', response.message);
                                // Highlight the medicine type badge
                                const $badge = $(`.medicine-type-badge[data-id="${id}"]`);
                                $badge.addClass('animate__animated animate__pulse');
                                setTimeout(() => $badge.removeClass('animate__animated animate__pulse'), 2000);
                            } else {
                                showAlert('error', response.message);
                            }
                        }
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Issue to waste error:', error);
                        showAlert('error', 'Failed to issue to biomedical waste');
                    });
            };

            // Sync button handler
            $('#btnSyncExpired').click(function() {
                console.log('Sync button clicked');
                const btn = $(this);
                btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Syncing...');

                $.post('@Url.Action("SyncExpiredMedicines", "ExpiredMedicine")')
                    .done(function(response) {
                        console.log('Sync response:', response);
                        if (response.success) {
                            showAlert('success', response.message);
                            if (tbl) tbl.ajax.reload();
                            loadStatistics();
                        } else {
                            showAlert('error', response.message);
                        }
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Sync error:', status, error);
                        showAlert('error', 'Failed to sync expired medicines');
                    })
                    .always(function() {
                        btn.prop('disabled', false).html('<i class="fas fa-sync"></i> Sync Expired Medicines');
                    });
            });

            // Tab switching
            $('#statusTabs button').click(function() {
                const status = $(this).data('status');
                console.log('Tab clicked:', status);

                if (status !== currentStatus) {
                    currentStatus = status;
                    $('#statusTabs button').removeClass('active');
                    $(this).addClass('active');

                    if (status === 'pending') {
                        $('#pendingAlert').show();
                        $('#disposedAlert').hide();
                    } else {
                        $('#pendingAlert').hide();
                        $('#disposedAlert').show();
                    }

                    if (tbl) {
                        tbl.ajax.reload();
                    }

                    // Hide validation alert when switching tabs
                    hideValidationAlert();
                }
            });

            // Select all checkbox functionality
            $('#selectAll').change(function() {
                $('.item-checkbox').prop('checked', $(this).is(':checked'));
                updateCheckboxStates();
            });

            // Individual checkbox change handler
            $(document).on('change', '.item-checkbox', function() {
                updateCheckboxStates();

                // Update select all checkbox
                const totalCheckboxes = $('.item-checkbox').length;
                const checkedCheckboxes = $('.item-checkbox:checked').length;

                if (checkedCheckboxes === 0) {
                    $('#selectAll').prop('indeterminate', false).prop('checked', false);
                } else if (checkedCheckboxes === totalCheckboxes) {
                    $('#selectAll').prop('indeterminate', false).prop('checked', true);
                } else {
                    $('#selectAll').prop('indeterminate', true);
                }
            });

            // NEW: Enhanced bulk issue button handler with validation
            $('#btnBulkIssue').click(function() {
                const $selectedCheckboxes = $('.item-checkbox:checked');
                const selectedIds = [];
                const ineligibleItems = [];

                $selectedCheckboxes.each(function() {
                    const $checkbox = $(this);
                    const id = $checkbox.val();
                    const canDispose = $checkbox.data('can-dispose') === true;

                    if (canDispose) {
                        selectedIds.push(id);
                    } else {
                        ineligibleItems.push({
                            id: id,
                            name: $checkbox.data('medicine-name'),
                            batch: $checkbox.data('batch'),
                            type: $checkbox.data('type')
                        });
                    }
                });

                if (selectedIds.length === 0) {
                    if (ineligibleItems.length > 0) {
                        const itemsList = ineligibleItems.map(item => `• ${item.name} (Batch: ${item.batch})`).join('\n');
                        showAlert('warning', `The following medicines need medicine type selection before disposal:\n\n${itemsList}\n\nPlease select Solid, Liquid, or Gel for each medicine.`);
                    } else {
                        showAlert('warning', 'Please select at least one item that is ready for disposal.');
                    }
                    return;
                }

                let confirmMessage = `Are you sure you want to issue ${selectedIds.length} selected medicines to biomedical waste?\n\nThis action cannot be undone.`;

                if (ineligibleItems.length > 0) {
                    confirmMessage += `\n\nNote: ${ineligibleItems.length} selected items will be skipped (medicine type not selected).`;
                }

                if (!confirm(confirmMessage)) {
                    return;
                }

                const btn = $(this);
                btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Processing...');

                $.post('@Url.Action("BulkIssueToBiomedicalWaste", "ExpiredMedicine")', {
                    ids: selectedIds.join(',')
                })
                .done(function(response) {
                    if (response.success) {
                        let message = response.message;
                        if (ineligibleItems.length > 0) {
                            message += `\n\n${ineligibleItems.length} items were skipped due to missing medicine type selection.`;
                        }
                        showAlert('success', message);
                        if (tbl) tbl.ajax.reload();
                        loadStatistics();
                        $('#selectAll').prop('checked', false);
                        hideValidationAlert();
                    } else {
                        if (response.requiresTypeSelection) {
                            showAlert('warning', response.message);
                        } else {
                            showAlert('error', response.message);
                        }
                    }
                })
                .fail(function(xhr, status, error) {
                    console.error('Bulk issue error:', error);
                    showAlert('error', 'Failed to process bulk issue');
                })
                .always(function() {
                    btn.prop('disabled', true).html('<i class="fas fa-biohazard"></i> Bulk Issue to Biomedical Waste');
                });
            });

            // Print Selected logic
            $('#btnPrintSelected').click(function () {
                var selectedIds = [];
                $('.item-checkbox:checked').each(function () {
                    selectedIds.push($(this).val());
                });

                if (selectedIds.length === 0) {
                    alert('Please select at least one record to print.');
                    return;
                }

                $.ajax({
                    url: '/ExpiredMedicine/PrintReport',
                    type: 'GET',
                    data: { ids: selectedIds.join(',') },
                    success: function (result) {
                        if (typeof result === "object" && result.success === false) {
                            alert(result.message || "Failed to generate print preview.");
                            return;
                        }
                        var printWindow = window.open('', '', 'height=800,width=1000');
                        printWindow.document.write(result);
                        printWindow.document.close();
                        printWindow.focus();
                    },
                    error: function () {
                        alert('Error: Unable to generate print preview. Please try again.');
                    }
                });
            });

            // Helper function to show alerts
            function showAlert(type, message) {
                console.log(`Alert [${type}]:`, message);

                // Create a simple toast-like notification
                const alertClass = type === 'success' ? 'alert-success' :
                                 type === 'warning' ? 'alert-warning' : 'alert-danger';
                const iconClass = type === 'success' ? 'fa-check-circle' :
                                type === 'warning' ? 'fa-exclamation-triangle' : 'fa-exclamation-triangle';

                const alertHtml = `<div class="alert ${alertClass} alert-dismissible fade show position-fixed"
                                  style="top: 20px; right: 20px; z-index: 9999; min-width: 300px; max-width: 500px;">
                                  <i class="fas ${iconClass}"></i>
                                  <span style="white-space: pre-line;">${message}</span>
                                  <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                                </div>`;

                $('body').append(alertHtml);

                // Auto-dismiss after 8 seconds for warnings, 5 seconds for others
                const timeout = type === 'warning' ? 8000 : 5000;
                setTimeout(function() {
                    $('.alert').alert('close');
                }, timeout);

                // Also show in console for debugging
                if (type === 'success') {
                    console.log('Success:', message);
                } else {
                    console.error('Error/Warning:', message);
                }
            }
        });
    </script>
}

<style>
    .modal-backdrop {
        z-index: -1 !important;
    }

    .medicine-type-badge {
        transition: all 0.2s ease;
    }

        .medicine-type-badge:hover {
            transform: scale(1.05);
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        /* NEW: Style for badges that need attention */
        .medicine-type-badge.border-danger {
            animation: subtle-pulse 2s infinite;
        }

    @@keyframes subtle-pulse {
        0%

    {
        box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.4);
    }

    70% {
        box-shadow: 0 0 0 4px rgba(220, 53, 69, 0);
    }

    100% {
        box-shadow: 0 0 0 0 rgba(220, 53, 69, 0);
    }

    }

    .medicine-type-dropdown {
        min-width: 100px;
    }

    /* NEW: Style for rows with items that can't be disposed */
    .table-warning {
        background-color: rgba(255, 193, 7, 0.1) !important;
    }

    /* NEW: Enhanced alert styling */
    .alert {
        border-left: 4px solid;
    }

    .alert-warning {
        border-left-color: #ffc107;
    }

    .alert-info {
        border-left-color: #0dcaf0;
    }

    .alert-success {
        border-left-color: #198754;
    }

    .alert-danger {
        border-left-color: #dc3545;
    }
</style>