@model EMS.WebApp.Data.HrEmployee
@if (ViewBag.Error != null)
{
    <div class="alert alert-warning">
        @ViewBag.Error
    </div>
}
<form asp-action="@(Model.emp_uid == 0 ? "Create" : "Edit")" method="post" id="hrEmployeeForm">
    @Html.AntiForgeryToken()

    <input asp-for="emp_uid" type="hidden" />
    <input type="hidden" id="checkUrlHidden" value="@Url.Action("CheckEmployeeIdExists", "HrEmployee")" />

    <!-- Display general validation message -->
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="row mb-3">
        <div class="col-md-4">
            <label asp-for="emp_id" class="form-label">Employee ID <span class="text-danger">*</span></label>
            <input asp-for="emp_id" class="form-control glass rounded-2" id="empIdInput" maxlength="20" placeholder="Enter employee ID" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="emp_id" class="text-danger" id="empIdValidation"></span>
                <small class="text-muted">
                    <span id="empIdCharCount">0</span>/20 characters
                </small>
            </div>
        </div>
        <div class="col-md-4">
            <label asp-for="emp_name" class="form-label">Employee Name <span class="text-danger">*</span></label>
            <input asp-for="emp_name" class="form-control glass rounded-2" id="empNameInput" maxlength="100" placeholder="Enter employee name" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="emp_name" class="text-danger" id="empNameValidation"></span>
                <small class="text-muted">
                    <span id="empNameCharCount">0</span>/100 characters
                </small>
            </div>
        </div>
        <div class="col-md-4">
            <label asp-for="emp_DOB" class="form-label">Date of Birth</label>
            <input asp-for="emp_DOB" type="date" class="form-control glass rounded-2" id="empDOBInput" />
            <span asp-validation-for="emp_DOB" class="text-danger" id="empDOBValidation"></span>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-4">
            <label asp-for="emp_Gender" class="form-label">Gender <span class="text-danger">*</span></label>
            <select asp-for="emp_Gender" class="form-select glass rounded-2" id="empGenderInput">
                <option value="">-- Select Gender --</option>
                <option value="M">Male</option>
                <option value="F">Female</option>
                <option value="O">Other</option>
            </select>
            <span asp-validation-for="emp_Gender" class="text-danger" id="empGenderValidation"></span>
        </div>
        <div class="col-md-4">
            <label asp-for="emp_Grade" class="form-label">Grade <span class="text-danger">*</span></label>
            <input asp-for="emp_Grade" class="form-control glass rounded-2" id="empGradeInput" maxlength="10" placeholder="Enter employee grade" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="emp_Grade" class="text-danger" id="empGradeValidation"></span>
                <small class="text-muted">
                    <span id="empGradeCharCount">0</span>/10 characters
                </small>
            </div>
        </div>
        <div class="col-md-4">
            <label asp-for="dept_id" class="form-label">Department <span class="text-danger">*</span></label>
            <select asp-for="dept_id" class="form-select glass rounded-2" asp-items="ViewBag.OrgDepartmentList" id="deptIdInput">
                <option value="">-- Select Department --</option>
            </select>
            <span asp-validation-for="dept_id" class="text-danger" id="deptIdValidation"></span>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-4">
            <label asp-for="plant_id" class="form-label">Plant <span class="text-danger">*</span></label>
            <select asp-for="plant_id" class="form-select glass rounded-2" asp-items="ViewBag.OrgPlantList" id="plantIdInput">
                <option value="">-- Select Plant --</option>
            </select>
            <span asp-validation-for="plant_id" class="text-danger" id="plantIdValidation"></span>
        </div>
        <div class="col-md-4">
            <label asp-for="emp_blood_Group" class="form-label">Blood Group</label>
            <select asp-for="emp_blood_Group" class="form-select glass rounded-2" id="empBloodGroupInput">
                <option value="">-- Select Blood Group --</option>
                <option value="A+">A+</option>
                <option value="A-">A-</option>
                <option value="B+">B+</option>
                <option value="B-">B-</option>
                <option value="AB+">AB+</option>
                <option value="AB-">AB-</option>
                <option value="O+">O+</option>
                <option value="O-">O-</option>
            </select>
            <span asp-validation-for="emp_blood_Group" class="text-danger" id="empBloodGroupValidation"></span>
        </div>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary" id="submitBtn">
            @(Model.emp_uid == 0 ? "Save" : "Update")
        </button>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script type="text/javascript">
        $(document).ready(function() {
            // Form elements
            const form = $('#hrEmployeeForm');
            const submitBtn = $('#submitBtn');
            const empIdInput = $('#empIdInput');
            const empNameInput = $('#empNameInput');
            const empDOBInput = $('#empDOBInput');
            const empGenderInput = $('#empGenderInput');
            const empGradeInput = $('#empGradeInput');
            const deptIdInput = $('#deptIdInput');
            const plantIdInput = $('#plantIdInput');
            const empBloodGroupInput = $('#empBloodGroupInput');
            const empUid = $('#emp_uid').val();

            // Character count elements
            const empIdCharCount = $('#empIdCharCount');
            const empNameCharCount = $('#empNameCharCount');
            const empGradeCharCount = $('#empGradeCharCount');

            // Validation flags
            let isCheckingEmpId = false;

            // Initialize validation
            form.removeData("validator");
            form.removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);

            // Security patterns to check for
            const dangerousPatterns = [
                /<script[^>]*>.*?<\/script>/gi,
                /javascript:/gi,
                /vbscript:/gi,
                /on\w+\s*=/gi,
                /<iframe/gi,
                /<object/gi,
                /<embed/gi,
                /<form/gi,
                /eval\s*\(/gi,
                /expression\s*\(/gi
            ];

            // Function to check for dangerous input
            function containsDangerousInput(text) {
                if (!text) return false;
                return dangerousPatterns.some(pattern => pattern.test(text));
            }

            // Character count functions
            function updateCharCount(input, countElement, maxLength) {
                const currentLength = input.val().length;
                countElement.text(currentLength);
                countElement.removeClass('text-warning text-danger');
                const warningThreshold = maxLength * 0.8;
                if (currentLength > warningThreshold && currentLength < maxLength) {
                    countElement.addClass('text-warning');
                } else if (currentLength >= maxLength) {
                    countElement.addClass('text-danger');
                }
            }

            // Validation functions
            function validateEmployeeId() {
                const empId = empIdInput.val().trim();
                const validationSpan = $('#empIdValidation');
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                empIdInput.removeClass('is-invalid');

                if (!empId) {
                    validationSpan.text('Employee ID is required.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empIdInput.addClass('is-invalid');
                    isValid = false;
                } else if (empId.length < 2) {
                    validationSpan.text('Employee ID must be at least 2 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empIdInput.addClass('is-invalid');
                    isValid = false;
                } else if (empId.length > 20) {
                    validationSpan.text('Employee ID cannot exceed 20 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empIdInput.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(empId)) {
                    validationSpan.text('Employee ID contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empIdInput.addClass('is-invalid');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\-_]+$/.test(empId)) {
                    validationSpan.text('Employee ID can only contain letters, numbers, hyphens, and underscores.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empIdInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            function validateEmployeeName() {
                const empName = empNameInput.val().trim();
                const validationSpan = $('#empNameValidation');
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                empNameInput.removeClass('is-invalid');

                if (!empName) {
                    validationSpan.text('Employee Name is required.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (empName.length < 2) {
                    validationSpan.text('Employee Name must be at least 2 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (empName.length > 100) {
                    validationSpan.text('Employee Name cannot exceed 100 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(empName)) {
                    validationSpan.text('Employee Name contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (!/^[a-zA-Z\s\-\.]+$/.test(empName)) {
                    validationSpan.text('Employee Name can only contain letters, spaces, hyphens, and dots.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empNameInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            function validateEmployeeGrade() {
                const empGrade = empGradeInput.val().trim();
                const validationSpan = $('#empGradeValidation');
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                empGradeInput.removeClass('is-invalid');

                if (!empGrade) {
                    validationSpan.text('Grade is required.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empGradeInput.addClass('is-invalid');
                    isValid = false;
                } else if (empGrade.length < 1) {
                    validationSpan.text('Grade must be at least 1 character.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empGradeInput.addClass('is-invalid');
                    isValid = false;
                } else if (empGrade.length > 10) {
                    validationSpan.text('Grade cannot exceed 10 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empGradeInput.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(empGrade)) {
                    validationSpan.text('Grade contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empGradeInput.addClass('is-invalid');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\-_]+$/.test(empGrade)) {
                    validationSpan.text('Grade can only contain letters, numbers, hyphens, and underscores.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    empGradeInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            function validateDateOfBirth() {
                const empDOB = empDOBInput.val();
                const validationSpan = $('#empDOBValidation');
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                empDOBInput.removeClass('is-invalid');

                if (empDOB) {
                    const dobDate = new Date(empDOB);
                    const today = new Date();
                    const age = today.getFullYear() - dobDate.getFullYear();
                    const monthDiff = today.getMonth() - dobDate.getMonth();
                    const dayDiff = today.getDate() - dobDate.getDate();

                    // Adjust age if birthday hasn't occurred this year
                    const actualAge = (monthDiff < 0 || (monthDiff === 0 && dayDiff < 0)) ? age - 1 : age;

                    if (dobDate > today) {
                        validationSpan.text('Date of Birth cannot be in the future.')
                                     .addClass('field-validation-error text-danger')
                                     .show();
                        empDOBInput.addClass('is-invalid');
                        isValid = false;
                    } else if (actualAge < 16) {
                        validationSpan.text('Employee must be at least 16 years old.')
                                     .addClass('field-validation-error text-danger')
                                     .show();
                        empDOBInput.addClass('is-invalid');
                        isValid = false;
                    } else if (actualAge > 80) {
                        validationSpan.text('Employee age cannot exceed 80 years.')
                                     .addClass('field-validation-error text-danger')
                                     .show();
                        empDOBInput.addClass('is-invalid');
                        isValid = false;
                    }
                }

                return isValid;
            }

            function validateRequiredFields() {
                let isValid = true;

                // Gender validation
                const empGender = empGenderInput.val();
                const genderValidationSpan = $('#empGenderValidation');
                genderValidationSpan.text('').removeClass('field-validation-error').hide();
                empGenderInput.removeClass('is-invalid');

                if (!empGender) {
                    genderValidationSpan.text('Gender is required.')
                                       .addClass('field-validation-error text-danger')
                                       .show();
                    empGenderInput.addClass('is-invalid');
                    isValid = false;
                }

                // Department validation
                const deptId = deptIdInput.val();
                const deptValidationSpan = $('#deptIdValidation');
                deptValidationSpan.text('').removeClass('field-validation-error').hide();
                deptIdInput.removeClass('is-invalid');

                if (!deptId) {
                    deptValidationSpan.text('Department is required.')
                                     .addClass('field-validation-error text-danger')
                                     .show();
                    deptIdInput.addClass('is-invalid');
                    isValid = false;
                }

                // Plant validation
                const plantId = plantIdInput.val();
                const plantValidationSpan = $('#plantIdValidation');
                plantValidationSpan.text('').removeClass('field-validation-error').hide();
                plantIdInput.removeClass('is-invalid');

                if (!plantId) {
                    plantValidationSpan.text('Plant is required.')
                                      .addClass('field-validation-error text-danger')
                                      .show();
                    plantIdInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            // Real-time validation for employee ID uniqueness
            function checkEmployeeIdUniqueness() {
                const empId = empIdInput.val().trim();
                const validationSpan = $('#empIdValidation');

                if (!empId || !validateEmployeeId()) {
                    updateSubmitButton();
                    return;
                }

                if (isCheckingEmpId) return;

                isCheckingEmpId = true;
                submitBtn.prop('disabled', true);

                const checkUrl = $('#checkUrlHidden').val();
                $.post(checkUrl, {
                    empId: empId,
                    empUid: empUid || null
                })
                .done(function(response) {
                    if (response.exists) {
                        validationSpan.text('An employee with this ID already exists. Please choose a different ID.')
                                     .addClass('field-validation-error text-danger')
                                     .show();
                        empIdInput.addClass('is-invalid');
                        submitBtn.prop('disabled', true);
                    } else {
                        if (validateEmployeeId()) {
                            validationSpan.text('').removeClass('field-validation-error').hide();
                            empIdInput.removeClass('is-invalid');
                        }
                        updateSubmitButton();
                    }
                })
                .fail(function() {
                    console.log('Error checking employee ID uniqueness');
                    updateSubmitButton();
                })
                .always(function() {
                    isCheckingEmpId = false;
                });
            }

            function updateSubmitButton() {
                const hasErrors = $('.field-validation-error:visible').length > 0 ||
                                $('.is-invalid').length > 0 ||
                                isCheckingEmpId;
                submitBtn.prop('disabled', hasErrors);
            }

            // Event handlers
            empIdInput.on('input keyup paste', function() {
                updateCharCount($(this), empIdCharCount, 20);
                validateEmployeeId();
                updateSubmitButton();
            });

            empNameInput.on('input keyup paste', function() {
                updateCharCount($(this), empNameCharCount, 100);
                validateEmployeeName();
                updateSubmitButton();
            });

            empGradeInput.on('input keyup paste', function() {
                updateCharCount($(this), empGradeCharCount, 10);
                validateEmployeeGrade();
                updateSubmitButton();
            });

            empDOBInput.on('change blur', function() {
                validateDateOfBirth();
                updateSubmitButton();
            });

            empGenderInput.on('change', function() {
                validateRequiredFields();
                updateSubmitButton();
            });

            deptIdInput.on('change', function() {
                validateRequiredFields();
                updateSubmitButton();
            });

            plantIdInput.on('change', function() {
                validateRequiredFields();
                updateSubmitButton();
            });

            // Debounced employee ID uniqueness check
            let empIdCheckTimeout;
            empIdInput.on('input keyup', function() {
                clearTimeout(empIdCheckTimeout);
                empIdCheckTimeout = setTimeout(checkEmployeeIdUniqueness, 500);
            });

            // Initialize on page load
            updateCharCount(empIdInput, empIdCharCount, 20);
            updateCharCount(empNameInput, empNameCharCount, 100);
            updateCharCount(empGradeInput, empGradeCharCount, 10);
            validateEmployeeId();
            validateEmployeeName();
            validateEmployeeGrade();
            validateDateOfBirth();
            validateRequiredFields();
            updateSubmitButton();

            // Prevent form submission if validation fails
            form.on('submit', function(e) {
                if (!validateEmployeeId() || !validateEmployeeName() || !validateEmployeeGrade() ||
                    !validateDateOfBirth() || !validateRequiredFields() || isCheckingEmpId) {
                    e.preventDefault();
                    return false;
                }

                // Final check for any visible errors
                if ($('.field-validation-error:visible').length > 0) {
                    e.preventDefault();
                    return false;
                }

                // Double-check for dangerous input before submission
                const empId = empIdInput.val().trim();
                const empName = empNameInput.val().trim();
                const empGrade = empGradeInput.val().trim();

                if (containsDangerousInput(empId) || containsDangerousInput(empName) || containsDangerousInput(empGrade)) {
                    e.preventDefault();
                    alert('Invalid input detected. Please remove any script tags or unsafe characters.');
                    return false;
                }
            });

            // Prevent pasting of dangerous content
            function handleDangerousPaste(input, inputName) {
                input.on('paste', function(e) {
                    setTimeout(function() {
                        const pastedContent = input.val();
                        if (containsDangerousInput(pastedContent)) {
                            input.val('');
                            alert('Pasted content in ' + inputName + ' contains unsafe characters and has been removed.');
                        }
                    }, 10);
                });
            }

            handleDangerousPaste(empIdInput, 'Employee ID');
            handleDangerousPaste(empNameInput, 'Employee Name');
            handleDangerousPaste(empGradeInput, 'Grade');
        });
    </script>
}