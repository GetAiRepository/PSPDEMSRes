@model EMS.WebApp.Data.StoreIndent

<div class="row mb-3">
    <div class="col-md-6">
        <label class="form-label">Indent ID</label>
        <input class="form-control rounded-2" value="@Model.IndentId" readonly />
    </div>
    <div class="col-md-6">
        <label class="form-label">Indent Type</label>
        <input class="form-control rounded-2" value="@Model.IndentType" readonly />
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <label class="form-label">Indent Date</label>
        <input class="form-control rounded-2" value="@Model.IndentDate.ToString("dd/MM/yyyy")" readonly />
    </div>
    <div class="col-md-6">
        <label class="form-label">Created By</label>
        <input class="form-control rounded-2" value="@(Model.CreatedBy ?? "N/A")" readonly />
    </div>
</div>

@* Medicines Section *@
<div class="row mb-3">
    <div class="col-12">
        <!-- Medicine validation messages -->
        <div id="medicineValidationMessage" class="alert alert-warning" style="display:none;"></div>

        <!-- Medicines table -->
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h6 class="mb-0">Medicines</h6>
            <button type="button" class="btn btn-sm btn-outline-primary" id="btnAddMed">
                <i class="bi bi-plus-lg"></i> Add Medicine
            </button>
        </div>

        <div class="table-responsive mb-3">
            <table id="tblMedIndent" class="table table-striped table-glass glass-table w-100 align-middle">
                <thead>
                    <tr>
                        <th style="width:60px">Sl.</th>
                        <th style="width:180px">Medicine Name</th>
                        <th style="width:120px">Company Name</th>
                        <th style="width:100px">Vendor Code</th>
                        <th style="width:80px">Raised Qty</th>
                        <th style="width:80px">Received Qty</th>
                        <th style="width:80px">Pending Qty</th>
                        <th style="width:90px">Unit Price</th>
                        <th style="width:100px">Total Amount</th>
                        <th style="width:100px">Batch No</th>
                        <th style="width:120px">Expiry Date</th>
                        <th style="width:120px">Action</th>
                    </tr>
                </thead>
                <tbody id="medicineTableBody">
                    @if (Model.StoreIndentItems?.Any() == true)
                    {
                        @for (int i = 0; i < Model.StoreIndentItems.Count; i++)
                        {
                            var item = Model.StoreIndentItems.ElementAt(i);
                            <tr data-temp-id="@item.IndentItemId">
                                <td>@(i + 1)</td>
                                <td>@item.MedMaster?.MedItemName</td>
                                <td>@(item.MedMaster?.CompanyName ?? "Not Defined")</td>
                                <td>@item.VendorCode</td>
                                <td>@item.RaisedQuantity</td>
                                <td>@item.ReceivedQuantity</td>
                                <td>@item.PendingQuantity</td>
                                <td>@(item.UnitPrice?.ToString("₹#,##0.00") ?? "-")</td>
                                <td>@(item.TotalAmount?.ToString("₹#,##0.00") ?? "-")</td>
                                <td>@(item.BatchNo ?? "-")</td>
                                <td>@(item.ExpiryDate?.ToString("dd/MM/yyyy") ?? "-")</td>
                                @* <td>@(item.ExpiryDate)</td> *@
                                <td>
                                    <button class="btn btn-sm btn-secondary edit me-1" data-temp-id="@item.IndentItemId" type="button" title="Edit">
                                        Edit
                                    </button>
                                    <button class="btn btn-sm btn-danger delete" data-temp-id="@item.IndentItemId" type="button" title="Delete">
                                        Del
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr id="noMedicinesRow">
                            <td colspan="12" class="text-center text-muted">No medicines added yet.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<form id="approveRejectForm" data-indent-id="@Model.IndentId">
    <div class="row mb-3">
        <div class="col-12">
            <label for="comments" class="form-label">Comments <span class="text-danger">*</span></label>
            <textarea id="comments" name="comments" class="form-control glass-input" rows="4"
                      placeholder="Enter your comments for approval/rejection..." required>@Model.Comments</textarea>
            <div class="invalid-feedback"></div>
        </div>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-success" id="btnApprove">
            <i class="bi bi-check-circle me-1"></i>Approve
        </button>
        <button type="button" class="btn btn-danger" id="btnReject">
            <i class="bi bi-x-circle me-1"></i>Reject
        </button>
    </div>
</form>

<script>
    $(document).ready(function() {
        const indentId = @Model.IndentId;
        let medicineOptionsHtml = '<option value="">Select Medicine</option>';

        // Load medicine options
        loadMedicineOptions();

        function loadMedicineOptions() {
            // Build medicine options from ViewBag (if available) or load via AJAX
            @if (ViewBag.MedicineList != null)
            {
                            @foreach (var medicine in (Microsoft.AspNetCore.Mvc.Rendering.SelectList)ViewBag.MedicineList)
                            {
                                            <text>medicineOptionsHtml += '<option value="@medicine.Value">@medicine.Text</option>';</text>
                            }
            }
        }

        // Add Medicine Button Click
        $('#btnAddMed').click(function() {
            addNewMedicineRow();
        });

        function addNewMedicineRow() {
            // Remove "no medicines" message if it exists
            $('#noMedicinesRow').remove();

            const newRowId = 'newRow' + Date.now();
            const newRow = `
                <tr id="${newRowId}" class="editing-row">
                    <td>${getNextSlNo()}</td>
                    <td>
                        <select class="form-select form-select-sm glass-input medicine-dropdown" required>
                            ${medicineOptionsHtml}
                        </select>
                        <div class="invalid-feedback"></div>
                    </td>
                    <td>
                        <input class="form-control form-control-sm glass-input company-input" readonly />
                    </td>
                    <td>
                        <input class="form-control form-control-sm glass-input vendor-input" placeholder="Enter vendor code" required />
                        <div class="invalid-feedback"></div>
                    </td>
                    <td>
                        <input class="form-control form-control-sm glass-input raised-qty-input" type="number" min="1" placeholder="Raised Qty" required />
                        <div class="invalid-feedback"></div>
                    </td>
                    <td>
                        <input class="form-control form-control-sm glass-input received-qty-input" type="number" min="0" placeholder="Received Qty" value="0" />
                    </td>
                    <td>
                        <input class="form-control form-control-sm glass-input pending-qty-display" readonly placeholder="Pending Qty" />
                    </td>
                    <td>
                        <input class="form-control form-control-sm glass-input unit-price-input" type="number" min="0" step="0.01" placeholder="Unit Price" />
                    </td>
                    <td>
                        <input class="form-control form-control-sm glass-input total-amount-display" readonly placeholder="Total Amount" />
                    </td>
                    <td>
                        <input class="form-control form-control-sm glass-input batch-no-input" placeholder="Batch No" maxlength="50" />
                    </td>
                    <td>
                        <input class="form-control form-control-sm glass-input expiry-date-input" type="date" min="${new Date().toISOString().split('T')[0]}" />
                    </td>
                    <td>
                        <button class="btn btn-sm btn-success save-medicine-item me-1" type="button" title="Save">
                            Save
                        </button>
                        <button class="btn btn-sm btn-secondary cancel-medicine-add" type="button" title="Cancel">
                            Cancel
                        </button>
                    </td>
                </tr>`;

            $('#medicineTableBody').append(newRow);
        }

        function getNextSlNo() {
            return $('#medicineTableBody tr:not(.editing-row)').length + 1;
        }

        // Medicine dropdown change - Get company name
        $(document).on('change', '.medicine-dropdown', function() {
            const row = $(this).closest('tr');
            const medItemId = $(this).val();
            const companyInput = row.find('.company-input');

            if (medItemId) {
                companyInput.val('Loading...');

                $.get('@Url.Action("GetMedicineDetails", "StoreIndent")', { medItemId: medItemId })
                    .done(function(result) {
                        if (result.success) {
                            companyInput.val(result.data.companyName);
                        } else {
                            companyInput.val('Not Defined');
                        }
                    })
                    .fail(function() {
                        companyInput.val('Not Defined');
                    });
            } else {
                companyInput.val('');
            }
        });

        // Auto-calculate pending quantity and total amount
        $(document).on('change keyup', '.raised-qty-input, .received-qty-input, .unit-price-input', function() {
            const row = $(this).closest('tr');
            const raisedQty = parseInt(row.find('.raised-qty-input').val()) || 0;
            const receivedQty = parseInt(row.find('.received-qty-input').val()) || 0;
            const unitPrice = parseFloat(row.find('.unit-price-input').val()) || 0;
            const pendingQty = raisedQty - receivedQty;
            const totalAmount = receivedQty * unitPrice;

            row.find('.pending-qty-display').val(pendingQty >= 0 ? pendingQty : 0);
            row.find('.total-amount-display').val(totalAmount > 0 ? totalAmount.toFixed(2) : '');
        });

        // Save new medicine item
        $(document).on('click', '.save-medicine-item', function() {
            const row = $(this).closest('tr');
            const medicineSelect = row.find('.medicine-dropdown');
            const vendorInput = row.find('.vendor-input');
            const raisedQtyInput = row.find('.raised-qty-input');
            const receivedQtyInput = row.find('.received-qty-input');
            const unitPriceInput = row.find('.unit-price-input');
            const batchNoInput = row.find('.batch-no-input');
            const expiryDateInput = row.find('.expiry-date-input');

            const medItemId = medicineSelect.val();
            const vendorCode = vendorInput.val().trim();
            const raisedQuantity = parseInt(raisedQtyInput.val());
            const receivedQuantity = parseInt(receivedQtyInput.val()) || 0;
            const unitPrice = parseFloat(unitPriceInput.val()) || 0;
            const batchNo = batchNoInput.val().trim();
            const expiryDate = expiryDateInput.val();

            // Validate
            if (!validateMedicineRow(row)) {
                return;
            }

            // Validate expiry date if provided
            if (expiryDate) {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const expiry = new Date(expiryDate);
                expiry.setHours(0, 0, 0, 0);

                if (expiry < today) {
                    alert('Expiry date cannot be in the past.');
                    return;
                }
            }

            // Disable button to prevent double submission
            $(this).prop('disabled', true);

            // Prepare data object
            const postData = {
                indentId: indentId,
                medItemId: medItemId,
                vendorCode: vendorCode,
                raisedQuantity: raisedQuantity,
                receivedQuantity: receivedQuantity
            };

            // Save via AJAX
            $.post('@Url.Action("AddMedicineItem", "StoreIndent")', postData)
            .done(function(response) {
                if (response.success) {
                    // Now update the newly created item with additional fields
                    const updateData = {
                        indentItemId: response.itemId,
                        unitPrice: unitPrice > 0 ? unitPrice : null,
                        batchNo: batchNo,
                        expiryDate: expiryDate ? new Date(expiryDate).toISOString() : null
                    };

                    $.post('@Url.Action("UpdateMedicineItem", "StoreIndent")', updateData)
                    .done(function(updateResponse) {
                        if (updateResponse.success) {
                            // Convert editing row to display row
                            const medicineText = medicineSelect.find('option:selected').text();
                            const companyName = row.find('.company-input').val();
                            const pendingQty = raisedQuantity - receivedQuantity;

                            const displayRow = `
                                <tr data-temp-id="${response.itemId}">
                                    <td>${row.find('td:first').text()}</td>
                                    <td>${medicineText}</td>
                                    <td>${companyName}</td>
                                    <td>${vendorCode}</td>
                                    <td>${raisedQuantity}</td>
                                    <td>${receivedQuantity}</td>
                                    <td>${pendingQty}</td>
                                    <td>${unitPrice > 0 ? '₹' + unitPrice.toFixed(2) : '-'}</td>
                                    <td>${updateResponse.data.totalAmount ? '₹' + updateResponse.data.totalAmount.toFixed(2) : '-'}</td>
                                    <td>${batchNo || '-'}</td>
                                    <td>${expiryDate ? new Date(expiryDate).toLocaleDateString('en-GB') : '-'}</td>
                                    <td>
                                        <button class="btn btn-sm btn-secondary edit me-1" data-temp-id="${response.itemId}" type="button" title="Edit">
                                            Edit
                                        </button>
                                        <button class="btn btn-sm btn-danger delete" data-temp-id="${response.itemId}" type="button" title="Delete">
                                            Del
                                        </button>
                                    </td>
                                </tr>`;

                            row.replaceWith(displayRow);
                            updateRowNumbers();
                            showValidationMessage('Medicine added successfully with all details!', 'success');

                            // Reload main table if available
                            if (typeof tbl !== 'undefined' && tbl.ajax) {
                                tbl.ajax.reload();
                            }
                        } else {
                            showValidationMessage('Medicine added but failed to update additional details.', 'warning');
                        }
                    });
                } else {
                    showValidationMessage(response.message, 'warning');
                    $(this).prop('disabled', false);
                }
            })
            .fail(function(xhr, status, error) {
                console.error('Add medicine item request failed:', status, error);
                showValidationMessage('Network error occurred. Please try again.', 'warning');
                $(this).prop('disabled', false);
            });
        });

        // Cancel adding new medicine
        $(document).on('click', '.cancel-medicine-add', function() {
            const row = $(this).closest('tr');
            row.remove();
            updateRowNumbers();

            // If no rows left, show "no medicines" message
            if ($('#medicineTableBody tr').length === 0) {
                $('#medicineTableBody').append(`<tr id="noMedicinesRow"><td colspan="12" class="text-center text-muted">No medicines added yet.</td></tr>`);
            }
        });

        // Delete medicine item (using the correct class name)
        $(document).on('click', '.delete', function() {
            if (!confirm('Are you sure you want to delete this medicine item?')) {
                return;
            }

            const itemId = $(this).data('temp-id');
            const row = $(this).closest('tr');

            $(this).prop('disabled', true);

            $.post('@Url.Action("DeleteMedicineItem", "StoreIndent")', {
                indentItemId: itemId
            })
            .done(function(response) {
                if (response.success) {
                    row.remove();
                    updateRowNumbers();
                    showValidationMessage(response.message, 'success');

                    // If no rows left, show "no medicines" message
                    if ($('#medicineTableBody tr').length === 0) {
                        $('#medicineTableBody').append(`<tr id="noMedicinesRow"><td colspan="12" class="text-center text-muted">No medicines added yet.</td></tr>`);
                    }

                    // Reload main table if available
                    if (typeof tbl !== 'undefined' && tbl.ajax) {
                        tbl.ajax.reload();
                    }
                } else {
                    showValidationMessage(response.message, 'warning');
                    $(this).prop('disabled', false);
                }
            })
            .fail(function(xhr, status, error) {
                console.error('Delete medicine item request failed:', status, error);
                showValidationMessage('Network error occurred. Please try again.', 'warning');
                $(this).prop('disabled', false);
            });
        });

        // Handle edit medicine item inline (using the correct class name)
        $(document).on('click', '.edit', function() {
            const itemId = $(this).data('temp-id');
            const row = $(this).closest('tr');

            convertRowToEditMode(row, itemId);
        });

        // Handle edit with reason (for fully received items in approve/reject modal)
        $(document).on('click', '.edit-with-reason', function() {
            const itemId = $(this).data('temp-id');
            const row = $(this).closest('tr');

            // For approve/reject modal, we'll need to implement reason logic
            // For now, show an alert that this functionality requires the reason modal
            alert('This item is fully received. Edit with reason functionality will be available in the detailed view.');
        });

        function convertRowToEditMode(row, itemId) {
            const currentMedicineName = row.find('td:eq(1)').text().trim();
            const currentCompanyName = row.find('td:eq(2)').text().trim();
            const currentVendorCode = row.find('td:eq(3)').text().trim();
            const currentRaisedQty = parseInt(row.find('td:eq(4)').text()) || 0;
            const currentReceivedQty = parseInt(row.find('td:eq(5)').text()) || 0;
            const currentUnitPrice = row.find('td:eq(7)').text().replace('₹', '').replace(',', '').trim();
            const currentBatchNo = row.find('td:eq(9)').text().trim();
            const currentExpiryDate = row.find('td:eq(10)').text().trim();

            const unitPriceValue = currentUnitPrice === '-' ? '' : currentUnitPrice;
            const batchNoValue = currentBatchNo === '-' ? '' : currentBatchNo;
            let expiryDateValue = '';

            if (currentExpiryDate !== '-') {
                // Convert from DD/MM/YYYY to YYYY-MM-DD for input[type=date]
                const dateParts = currentExpiryDate.split('/');
                if (dateParts.length === 3) {
                    expiryDateValue = `${dateParts[2]}-${dateParts[1].padStart(2, '0')}-${dateParts[0].padStart(2, '0')}`;
                }
            }

            // Store original row content
            row.data('original-content', row.html());

            // Replace medicine name with dropdown
            row.find('td:eq(1)').html(`
                <select class="form-select form-select-sm glass-input edit-medicine-dropdown" required>
                    ${medicineOptionsHtml}
                </select>
                <div class="invalid-feedback"></div>
            `);

            // Replace company name with readonly input (will be auto-populated)
            row.find('td:eq(2)').html(`
                <input class="form-control form-control-sm glass-input edit-company-input" readonly value="${currentCompanyName}" />
            `);

            // Replace vendor code with input
            row.find('td:eq(3)').html(`
                <input class="form-control form-control-sm glass-input edit-vendor-input"
                       value="${currentVendorCode}" placeholder="Enter vendor code" required />
                <div class="invalid-feedback"></div>
            `);

            // Replace raised quantity with input
            row.find('td:eq(4)').html(`
                <input type="number" class="form-control form-control-sm glass-input edit-raised-qty-input"
                       value="${currentRaisedQty}" min="1" placeholder="Raised Qty" required />
                <div class="invalid-feedback"></div>
            `);

            // Replace received quantity with input
            row.find('td:eq(5)').html(`
                <input type="number" class="form-control form-control-sm glass-input edit-received-qty-input"
                       value="${currentReceivedQty}" min="0" placeholder="Received Qty" />
            `);

            // Replace pending quantity with readonly input (calculated)
            row.find('td:eq(6)').html(`
                <input class="form-control form-control-sm glass-input edit-pending-qty-display" readonly placeholder="Pending Qty" />
            `);

            // Replace unit price with input
            row.find('td:eq(7)').html(`
                <input type="number" class="form-control form-control-sm glass-input edit-unit-price-input"
                       value="${unitPriceValue}" min="0" step="0.01" placeholder="Unit Price" />
            `);

            // Replace total amount with readonly input (calculated)
            row.find('td:eq(8)').html(`
                <input class="form-control form-control-sm glass-input edit-total-amount-display" readonly placeholder="Total Amount" />
            `);

            // Replace batch no with input
            row.find('td:eq(9)').html(`
                <input class="form-control form-control-sm glass-input edit-batch-no-input"
                       value="${batchNoValue}" placeholder="Batch No" maxlength="50" />
            `);

            // Replace expiry date with input
            row.find('td:eq(10)').html(`
                <input type="date" class="form-control form-control-sm glass-input edit-expiry-date-input"
                       value="${expiryDateValue}" min="${new Date().toISOString().split('T')[0]}" />
            `);

            // Replace action button with save/cancel
            row.find('td:eq(11)').html(`
                <button class="btn btn-sm btn-success save-medicine-inline me-1" data-temp-id="${itemId}" title="Save Changes">
                    <i class="bi bi-check"></i>Save
                </button>
                <button class="btn btn-sm btn-secondary cancel-medicine-inline" title="Cancel">
                    <i class="bi bi-x"></i>Cancel
                </button>
            `);

            // Set the selected medicine in dropdown and trigger change to load company
            const medicineSelect = row.find('.edit-medicine-dropdown');
            // Find the medicine option that matches the current medicine name
            medicineSelect.find('option').each(function() {
                if ($(this).text().trim() === currentMedicineName) {
                    medicineSelect.val($(this).val());
                    return false; // break the loop
                }
            });

            // Auto-calculate pending quantity and total amount
            updatePendingQuantityAndTotalInEditMode(row);

            // Add event listeners for auto-calculation and company name loading
            row.find('.edit-raised-qty-input, .edit-received-qty-input, .edit-unit-price-input').on('input', function() {
                updatePendingQuantityAndTotalInEditMode(row);
            });

            // Handle medicine dropdown change
            row.find('.edit-medicine-dropdown').on('change', function() {
                const medItemId = $(this).val();
                const companyInput = row.find('.edit-company-input');

                if (medItemId) {
                    companyInput.val('Loading...');

                    $.get('@Url.Action("GetMedicineDetails", "StoreIndent")', { medItemId: medItemId })
                        .done(function(result) {
                            if (result.success) {
                                companyInput.val(result.data.companyName);
                            } else {
                                companyInput.val('Not Defined');
                            }
                        })
                        .fail(function() {
                            companyInput.val('Not Defined');
                        });
                } else {
                    companyInput.val('');
                }
            });
        }

        function updatePendingQuantityAndTotalInEditMode(row) {
            const raisedQty = parseInt(row.find('.edit-raised-qty-input').val()) || 0;
            const receivedQty = parseInt(row.find('.edit-received-qty-input').val()) || 0;
            const unitPrice = parseFloat(row.find('.edit-unit-price-input').val()) || 0;
            const pendingQty = Math.max(0, raisedQty - receivedQty);
            const totalAmount = receivedQty * unitPrice;

            // Update pending quantity display
            row.find('.edit-pending-qty-display').val(pendingQty);
            // Update total amount display
            row.find('.edit-total-amount-display').val(totalAmount > 0 ? totalAmount.toFixed(2) : '');
        }

        // Save medicine item inline
        $(document).on('click', '.save-medicine-inline', function() {
            const itemId = $(this).data('temp-id');
            const row = $(this).closest('tr');

            // Get all the edited values
            const medicineSelect = row.find('.edit-medicine-dropdown');
            const vendorInput = row.find('.edit-vendor-input');
            const raisedQtyInput = row.find('.edit-raised-qty-input');
            const receivedQtyInput = row.find('.edit-received-qty-input');
            const unitPriceInput = row.find('.edit-unit-price-input');
            const batchNoInput = row.find('.edit-batch-no-input');
            const expiryDateInput = row.find('.edit-expiry-date-input');

            const medItemId = medicineSelect.val();
            const vendorCode = vendorInput.val().trim();
            const raisedQuantity = parseInt(raisedQtyInput.val()) || 0;
            const receivedQuantity = parseInt(receivedQtyInput.val()) || 0;
            const unitPrice = parseFloat(unitPriceInput.val()) || null;
            const batchNo = batchNoInput.val().trim();
            const expiryDate = expiryDateInput.val();

            // Validate all fields
            if (!validateEditMedicineRow(row)) {
                return;
            }

            // Validate received quantity doesn't exceed raised quantity
            if (receivedQuantity > raisedQuantity) {
                alert('Received quantity cannot exceed raised quantity.');
                return;
            }

            // Validate expiry date if provided
            if (expiryDate) {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const expiry = new Date(expiryDate);
                expiry.setHours(0, 0, 0, 0);

                if (expiry < today) {
                    alert('Expiry date cannot be in the past.');
                    return;
                }
            }

            // Disable button to prevent double submission
            $(this).prop('disabled', true);

            // Prepare data object
            const postData = {
                indentItemId: itemId,
                medItemId: medItemId,
                vendorCode: vendorCode,
                raisedQuantity: raisedQuantity,
                receivedQuantity: receivedQuantity,
                unitPrice: unitPrice,
                batchNo: batchNo
            };

            if (expiryDate) {
                postData.expiryDate = new Date(expiryDate).toISOString();
            }

            // Update via AJAX with all fields
            $.post('@Url.Action("UpdateMedicineItem", "StoreIndent")', postData)
            .done(function(response) {
                if (response.success) {
                    // Get the updated medicine name and company name for display
                    const medicineName = medicineSelect.find('option:selected').text();
                    const companyName = row.find('.edit-company-input').val();

                    // Update row with new values (convert back to display mode)
                    row.find('td:eq(1)').text(medicineName);
                    row.find('td:eq(2)').text(companyName);
                    row.find('td:eq(3)').text(vendorCode);
                    row.find('td:eq(4)').text(raisedQuantity);
                    row.find('td:eq(5)').text(receivedQuantity);
                    row.find('td:eq(6)').html(`
                        <span class="badge ${response.data.pendingQuantity > 0 ? 'bg-warning' : 'bg-success'}">
                            ${response.data.pendingQuantity}
                        </span>
                    `);
                    row.find('td:eq(7)').text(response.data.unitPrice ? '₹' + response.data.unitPrice.toFixed(2) : '-');
                    row.find('td:eq(8)').text(response.data.totalAmount ? '₹' + response.data.totalAmount.toFixed(2) : '-');
                    row.find('td:eq(9)').text(response.data.batchNo || '-');
                    row.find('td:eq(10)').text(
                        response.data.expiryDate ?
                        new Date(response.data.expiryDate).toLocaleDateString('en-GB') :
                        '-'
                    );

                    // Restore action buttons (always show both edit and delete)
                    row.find('td:eq(11)').html(`
                        <button class="btn btn-sm btn-secondary edit me-1" data-temp-id="${itemId}" type="button" title="Edit">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-danger delete" data-temp-id="${itemId}" type="button" title="Delete">
                            Del
                        </button>
                    `);

                    // Remove the stored original content
                    row.removeData('original-content');

                    // Show success message
                    showValidationMessage(response.message, 'success');

                    // Reload main table if available
                    if (typeof tbl !== 'undefined' && tbl.ajax) {
                        tbl.ajax.reload();
                    }
                } else {
                    alert(response.message || 'Failed to update medicine item.');
                    // Re-enable button
                    $(this).prop('disabled', false);
                }
            })
            .fail(function(xhr, status, error) {
                console.error('Update medicine item request failed:', status, error);
                alert('Network error occurred. Please try again.');
                // Re-enable button
                $(this).prop('disabled', false);
            });
        });

        // Cancel medicine item inline edit
        $(document).on('click', '.cancel-medicine-inline', function() {
            const row = $(this).closest('tr');
            const originalContent = row.data('original-content');

            if (originalContent) {
                row.html(originalContent);
                row.removeData('original-content');
            }
        });

        function validateEditMedicineRow(row) {
            let isValid = true;
            clearEditRowValidation(row);

            const medicineSelect = row.find('.edit-medicine-dropdown');
            const vendorInput = row.find('.edit-vendor-input');
            const raisedQtyInput = row.find('.edit-raised-qty-input');

            const medItemId = medicineSelect.val();
            const vendorCode = vendorInput.val().trim();
            const raisedQuantity = parseInt(raisedQtyInput.val());

            // Validate medicine selection
            if (!medItemId || medItemId === '') {
                showEditFieldError(medicineSelect, 'Please select a medicine');
                isValid = false;
            }

            // Validate vendor code
            if (!vendorCode || vendorCode === '') {
                showEditFieldError(vendorInput, 'Please enter vendor code');
                isValid = false;
            }

            // Validate raised quantity
            if (!raisedQuantity || raisedQuantity <= 0) {
                showEditFieldError(raisedQtyInput, 'Please enter valid raised quantity');
                isValid = false;
            }

            return isValid;
        }

        function showEditFieldError(field, message) {
            field.addClass('is-invalid');
            field.siblings('.invalid-feedback').text(message);
        }

        function clearEditRowValidation(row) {
            row.find('.is-invalid').removeClass('is-invalid');
            row.find('.invalid-feedback').text('');
        }

        function validateMedicineRow(row) {
            let isValid = true;
            clearRowValidation(row);

            const medicineSelect = row.find('.medicine-dropdown');
            const vendorInput = row.find('.vendor-input');
            const raisedQtyInput = row.find('.raised-qty-input');

            const medItemId = medicineSelect.val();
            const vendorCode = vendorInput.val().trim();
            const raisedQuantity = parseInt(raisedQtyInput.val());

            // Validate medicine selection
            if (!medItemId || medItemId === '') {
                showFieldError(medicineSelect, 'Please select a medicine');
                isValid = false;
            }

            // Validate vendor code
            if (!vendorCode || vendorCode === '') {
                showFieldError(vendorInput, 'Please enter vendor code');
                isValid = false;
            }

            // Validate raised quantity
            if (!raisedQuantity || raisedQuantity <= 0) {
                showFieldError(raisedQtyInput, 'Please enter valid raised quantity');
                isValid = false;
            }

            return isValid;
        }

        function showFieldError(field, message) {
            field.addClass('is-invalid');
            field.siblings('.invalid-feedback').text(message);
        }

        function clearRowValidation(row) {
            row.find('.is-invalid').removeClass('is-invalid');
            row.find('.invalid-feedback').text('');
        }

        function updateRowNumbers() {
            $('#medicineTableBody tr:not(.editing-row)').each(function(index) {
                if (!$(this).find('td:first').hasClass('text-center')) {
                    $(this).find('td:first').text(index + 1);
                }
            });
        }

        function showValidationMessage(message, type = 'warning') {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-warning';
            $('#medicineValidationMessage')
                .removeClass('alert-warning alert-success')
                .addClass(alertClass)
                .text(message)
                .show();

            // Auto hide after 3 seconds
            setTimeout(function() {
                $('#medicineValidationMessage').fadeOut();
            }, 3000);
        }

        // Approve/Reject functionality (existing code)
        $('#btnApprove, #btnReject').click(function() {
            const action = $(this).attr('id') === 'btnApprove' ? 'approve' : 'reject';
            const comments = $('#comments').val().trim();
            const indentId = $('#approveRejectForm').data('indent-id');

            // Clear previous validation
            $('#comments').removeClass('is-invalid');
            $('.invalid-feedback').text('');

            // Validate comments
            if (!comments) {
                $('#comments').addClass('is-invalid');
                $('#comments').siblings('.invalid-feedback').text('Comments are required');
                return;
            }

            if (comments.length < 10) {
                $('#comments').addClass('is-invalid');
                $('#comments').siblings('.invalid-feedback').text('Please provide detailed comments (minimum 10 characters)');
                return;
            }

            // Confirm action
            const actionText = action === 'approve' ? 'approve' : 'reject';
            const confirmMessage = `Are you sure you want to ${actionText} this Store Indent?`;

            if (!confirm(confirmMessage)) {
                return;
            }

            // Disable buttons to prevent double submission
            $('#btnApprove, #btnReject').prop('disabled', true);

            // Submit the action
            const submitUrl = '@Url.Action("UpdateStatus", "StoreIndent")';

            $.post(submitUrl, {
                indentId: indentId,
                status: action === 'approve' ? 'Approved' : 'Rejected',
                comments: comments
            })
            .done(function(response) {
                if (response.success) {
                    $('#modalStoreIndent').modal('hide');

                    // Show success message
                    if (typeof showMessage === 'function') {
                        showMessage(`Store Indent ${actionText}d successfully!`, 'success');
                    }

                    // Reload the table
                    if (typeof tbl !== 'undefined' && tbl.ajax) {
                        tbl.ajax.reload();
                    }
                } else {
                    alert(response.message || `Failed to ${actionText} the indent.`);
                }
            })
            .fail(function() {
                alert(`Network error occurred while trying to ${actionText} the indent.`);
            })
            .always(function() {
                // Re-enable buttons
                $('#btnApprove, #btnReject').prop('disabled', false);
            });
        });
    });
</script>