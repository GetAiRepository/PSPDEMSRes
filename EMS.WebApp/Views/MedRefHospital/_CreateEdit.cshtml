@model EMS.WebApp.Data.MedRefHospital
@if (ViewBag.Error != null)
{
    <div class="alert alert-warning">
        @ViewBag.Error
    </div>
}
<form asp-action="@(Model.hosp_id == 0 ? "Create" : "Edit")" method="post" id="medRefHospitalForm">
    @Html.AntiForgeryToken()

    <input asp-for="hosp_id" type="hidden" />
    <input type="hidden" id="checkUrlHidden" value="@Url.Action("CheckHospitalNameCodeExists", "MedRefHospital")" />

    <!-- Display general validation message for combination uniqueness -->
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label asp-for="hosp_name" class="form-label">Hospital Name <span class="text-danger">*</span></label>
            <input asp-for="hosp_name" class="form-control glass rounded-2" id="hospNameInput" maxlength="120" placeholder="Enter hospital name" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="hosp_name" class="text-danger" id="hospNameValidation"></span>
                <small class="text-muted">
                    <span id="hospNameCharCount">0</span>/120 characters
                </small>
            </div>
        </div>

        <div class="col-md-3">
            <label asp-for="hosp_code" class="form-label">Hospital Code <span class="text-danger">*</span></label>
            <input asp-for="hosp_code" class="form-control glass rounded-2" id="hospCodeInput" maxlength="20" placeholder="Enter hospital code" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="hosp_code" class="text-danger" id="hospCodeValidation"></span>
                <small class="text-muted">
                    <span id="hospCodeCharCount">0</span>/20 characters
                </small>
            </div>
        </div>

        <div class="col-md-3">
            <label asp-for="speciality" class="form-label">Speciality <span class="text-danger">*</span></label>
            <input asp-for="speciality" class="form-control glass rounded-2" id="specialityInput" maxlength="100" placeholder="Enter speciality" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="speciality" class="text-danger" id="specialityValidation"></span>
                <small class="text-muted">
                    <span id="specialityCharCount">0</span>/100 characters
                </small>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label asp-for="address" class="form-label">Address</label>
            <textarea asp-for="address" class="form-control glass rounded-2" rows="3" id="addressInput" maxlength="500" placeholder="Enter address"></textarea>
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="address" class="text-danger" id="addressValidation"></span>
                <small class="text-muted">
                    <span id="addressCharCount">0</span>/500 characters
                </small>
            </div>
        </div>
        <div class="col-md-6">
            <label asp-for="description" class="form-label">Description</label>
            <textarea asp-for="description" class="form-control glass rounded-2" rows="3" id="descriptionInput" maxlength="500" placeholder="Enter description"></textarea>
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="description" class="text-danger" id="descriptionValidation"></span>
                <small class="text-muted">
                    <span id="descriptionCharCount">0</span>/500 characters
                </small>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label asp-for="tax_category" class="form-label">Tax Category <span class="text-danger">*</span></label>
            <div class="d-flex justify-content-around align-items-center">
                <div class="form-check">
                    <input class="form-check-input" type="radio" asp-for="tax_category" value="T" id="taxable">
                    <label class="form-check-label" for="taxable">Taxable</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" asp-for="tax_category" value="N" id="nonTaxable">
                    <label class="form-check-label" for="nonTaxable">Non-Taxable</label>
                </div>
            </div>
            <span asp-validation-for="tax_category" class="text-danger"></span>
        </div>

        <div class="col-md-6">
            <label asp-for="vendor_name" class="form-label">Vendor Name <span class="text-danger">*</span></label>
            <input asp-for="vendor_name" class="form-control glass rounded-2" id="vendorNameInput" maxlength="120" placeholder="Enter vendor name" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="vendor_name" class="text-danger" id="vendorNameValidation"></span>
                <small class="text-muted">
                    <span id="vendorNameCharCount">0</span>/120 characters
                </small>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-3">
            <label asp-for="vendor_code" class="form-label">Vendor Code <span class="text-danger">*</span></label>
            <input asp-for="vendor_code" class="form-control glass rounded-2" id="vendorCodeInput" maxlength="20" placeholder="Enter vendor code" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="vendor_code" class="text-danger" id="vendorCodeValidation"></span>
                <small class="text-muted">
                    <span id="vendorCodeCharCount">0</span>/20 characters
                </small>
            </div>
        </div>
        <div class="col-md-3">
            <label asp-for="contact_person_name" class="form-label">Contact Person Name</label>
            <input asp-for="contact_person_name" class="form-control glass rounded-2" id="contactPersonInput" maxlength="100" placeholder="Enter contact person name" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="contact_person_name" class="text-danger" id="contactPersonValidation"></span>
                <small class="text-muted">
                    <span id="contactPersonCharCount">0</span>/100 characters
                </small>
            </div>
        </div>
        <div class="col-md-6">
            <label asp-for="contact_person_email_id" class="form-label">Contact Person Email Id</label>
            <input asp-for="contact_person_email_id" type="email" class="form-control glass rounded-2" id="contactEmailInput" maxlength="100" placeholder="Enter email address" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="contact_person_email_id" class="text-danger" id="contactEmailValidation"></span>
                <small class="text-muted">
                    <span id="contactEmailCharCount">0</span>/100 characters
                </small>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-3">
            <label asp-for="mobile_number_1" class="form-label">Mobile Number One</label>
            <input asp-for="mobile_number_1" type="tel" class="form-control glass rounded-2" id="mobile1Input" maxlength="10" placeholder="Enter 10-digit mobile number" />
            <span asp-validation-for="mobile_number_1" class="text-danger" id="mobile1Validation"></span>
        </div>
        <div class="col-md-3">
            <label asp-for="mobile_number_2" class="form-label">Mobile Number Two</label>
            <input asp-for="mobile_number_2" type="tel" class="form-control glass rounded-2" id="mobile2Input" maxlength="10" placeholder="Enter 10-digit mobile number" />
            <span asp-validation-for="mobile_number_2" class="text-danger" id="mobile2Validation"></span>
        </div>
        <div class="col-md-3">
            <label asp-for="phone_number_1" class="form-label">Phone Number One</label>
            <input asp-for="phone_number_1" type="tel" class="form-control glass rounded-2" id="phone1Input" maxlength="11" placeholder="Enter 10-11 digit phone number" />
            <span asp-validation-for="phone_number_1" class="text-danger" id="phone1Validation"></span>
        </div>
        <div class="col-md-3">
            <label asp-for="phone_number_2" class="form-label">Phone Number Two</label>
            <input asp-for="phone_number_2" type="tel" class="form-control glass rounded-2" id="phone2Input" maxlength="11" placeholder="Enter 10-11 digit phone number" />
            <span asp-validation-for="phone_number_2" class="text-danger" id="phone2Validation"></span>
        </div>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary" id="submitBtn">
            @(Model.hosp_id == 0 ? "Save" : "Update")
        </button>
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script type="text/javascript">
        $(document).ready(function() {
            // Form elements
            const form = $('#medRefHospitalForm');
            const submitBtn = $('#submitBtn');
            const hospNameInput = $('#hospNameInput');
            const hospCodeInput = $('#hospCodeInput');
            const specialityInput = $('#specialityInput');
            const addressInput = $('#addressInput');
            const descriptionInput = $('#descriptionInput');
            const vendorNameInput = $('#vendorNameInput');
            const vendorCodeInput = $('#vendorCodeInput');
            const contactPersonInput = $('#contactPersonInput');
            const contactEmailInput = $('#contactEmailInput');
            const mobile1Input = $('#mobile1Input');
            const mobile2Input = $('#mobile2Input');
            const phone1Input = $('#phone1Input');
            const phone2Input = $('#phone2Input');
            const hospId = $('#hosp_id').val();

            // Character count elements
            const hospNameCharCount = $('#hospNameCharCount');
            const hospCodeCharCount = $('#hospCodeCharCount');
            const specialityCharCount = $('#specialityCharCount');
            const addressCharCount = $('#addressCharCount');
            const descriptionCharCount = $('#descriptionCharCount');
            const vendorNameCharCount = $('#vendorNameCharCount');
            const vendorCodeCharCount = $('#vendorCodeCharCount');
            const contactPersonCharCount = $('#contactPersonCharCount');
            const contactEmailCharCount = $('#contactEmailCharCount');

            // Validation flags
            let isCheckingCombination = false;

            // Initialize validation
            form.removeData("validator");
            form.removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);

            // Security patterns to check for
            const dangerousPatterns = [
                /<script[^>]*>.*?<\/script>/gi,
                /javascript:/gi,
                /vbscript:/gi,
                /on\w+\s*=/gi,
                /<iframe/gi,
                /<object/gi,
                /<embed/gi,
                /<form/gi,
                /eval\s*\(/gi,
                /expression\s*\(/gi
            ];

            // Function to check for dangerous input
            function containsDangerousInput(text) {
                if (!text) return false;
                return dangerousPatterns.some(pattern => pattern.test(text));
            }

            // Character count functions
            function updateCharCount(input, countElement, maxLength) {
                const currentLength = input.val().length;
                countElement.text(currentLength);
                countElement.removeClass('text-warning text-danger');
                const warningThreshold = maxLength * 0.8;
                if (currentLength > warningThreshold && currentLength < maxLength) {
                    countElement.addClass('text-warning');
                } else if (currentLength >= maxLength) {
                    countElement.addClass('text-danger');
                }
            }

            // Validation functions
            function validateTextInput(input, validationSpan, fieldName, minLength, maxLength, pattern) {
                const value = input.val().trim();
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                input.removeClass('is-invalid');

                if (input.attr('data-val-required') && !value) {
                    validationSpan.text(fieldName + ' is required.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    input.addClass('is-invalid');
                    isValid = false;
                } else if (value && value.length < minLength) {
                    validationSpan.text(fieldName + ' must be at least ' + minLength + ' characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    input.addClass('is-invalid');
                    isValid = false;
                } else if (value && value.length > maxLength) {
                    validationSpan.text(fieldName + ' cannot exceed ' + maxLength + ' characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    input.addClass('is-invalid');
                    isValid = false;
                } else if (value && containsDangerousInput(value)) {
                    validationSpan.text(fieldName + ' contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    input.addClass('is-invalid');
                    isValid = false;
                } else if (value && pattern && !pattern.test(value)) {
                    validationSpan.text(fieldName + ' contains invalid characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    input.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            

            function validatePhone(input, validationSpan, fieldName, minLength, maxLength) {
                const value = input.val().trim();
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                input.removeClass('is-invalid');

                if (value && (!/^\d+$/.test(value) || value.length < minLength || value.length > maxLength)) {
                    validationSpan.text(fieldName + ' must be ' + minLength + (minLength === maxLength ? '' : '-' + maxLength) + ' digits.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    input.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            // Real-time validation for hospital name and code combination
            function checkHospitalNameCodeCombination() {
                const hospName = hospNameInput.val().trim();
                const hospCode = hospCodeInput.val().trim();
                const hospNameValidation = $('#hospNameValidation');
                const hospCodeValidation = $('#hospCodeValidation');

                // Clear previous combination errors
                hospNameValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();
                hospCodeValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();

                if (!hospName || !hospCode) {
                    hospNameInput.removeClass('is-invalid');
                    hospCodeInput.removeClass('is-invalid');
                    updateSubmitButton();
                    return true;
                }

                if (isCheckingCombination) return;

                isCheckingCombination = true;
                submitBtn.prop('disabled', true);

                $.post('@Html.Raw(Url.Action("CheckHospitalNameCodeExists", "MedRefHospital"))', {
                    hospName: hospName,
                    hospCode: hospCode,
                    hospId: hospId || null
                })
                .done(function(response) {
                    if (response.exists) {
                        const errorMessage = 'This hospital name and code combination already exists.';

                        // Show error on both fields
                        hospNameValidation.text(errorMessage)
                                         .addClass('field-validation-error text-danger')
                                         .show();
                        hospCodeValidation.text(errorMessage)
                                          .addClass('field-validation-error text-danger')
                                          .show();

                        hospNameInput.addClass('is-invalid');
                        hospCodeInput.addClass('is-invalid');
                        submitBtn.prop('disabled', true);
                    } else {
                        // Clear combination errors only
                        hospNameValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();
                        hospCodeValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();

                        hospNameInput.removeClass('is-invalid');
                        hospCodeInput.removeClass('is-invalid');
                        updateSubmitButton();
                    }
                })
                .fail(function() {
                    // On error, allow form submission (server will handle validation)
                    hospNameValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();
                    hospCodeValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();

                    hospNameInput.removeClass('is-invalid');
                    hospCodeInput.removeClass('is-invalid');
                    updateSubmitButton();
                })
                .always(function() {
                    isCheckingCombination = false;
                });
            }

            function updateSubmitButton() {
                const hasErrors = $('.field-validation-error:visible').length > 0 ||
                                $('.is-invalid').length > 0 ||
                                isCheckingCombination;
                submitBtn.prop('disabled', hasErrors);
            }

            // Event handlers for character counting and validation
            hospNameInput.on('input keyup paste', function() {
                updateCharCount($(this), hospNameCharCount, 120);
                validateTextInput($(this), $('#hospNameValidation'), 'Hospital Name', 2, 120, /^[a-zA-Z0-9\s\-_\.\(\)\[\]]+$/);
                updateSubmitButton();
            });

            hospCodeInput.on('input keyup paste', function() {
                updateCharCount($(this), hospCodeCharCount, 20);
                validateTextInput($(this), $('#hospCodeValidation'), 'Hospital Code', 2, 20, /^[a-zA-Z0-9\-_]+$/);
                updateSubmitButton();
            });

            specialityInput.on('input keyup paste', function() {
                updateCharCount($(this), specialityCharCount, 100);
                validateTextInput($(this), $('#specialityValidation'), 'Speciality', 2, 100, /^[a-zA-Z0-9\s\-_\.\,\(\)\[\]]+$/);
                updateSubmitButton();
            });

            addressInput.on('input keyup paste', function() {
                updateCharCount($(this), addressCharCount, 500);
                validateTextInput($(this), $('#addressValidation'), 'Address', 0, 500, /^[a-zA-Z0-9\s\-_\.\,\;\:\!\?\(\)\[\]\{\}#/]*$/);
                updateSubmitButton();
            });

            descriptionInput.on('input keyup paste', function() {
                updateCharCount($(this), descriptionCharCount, 500);
                validateTextInput($(this), $('#descriptionValidation'), 'Description', 0, 500, /^[a-zA-Z0-9\s\-_\.\,\;\:\!\?\(\)\[\]\{\}]*$/);
                updateSubmitButton();
            });

            vendorNameInput.on('input keyup paste', function() {
                updateCharCount($(this), vendorNameCharCount, 120);
                validateTextInput($(this), $('#vendorNameValidation'), 'Vendor Name', 2, 120, /^[a-zA-Z0-9\s\-_\.\(\)\[\]]+$/);
                updateSubmitButton();
            });

            vendorCodeInput.on('input keyup paste', function() {
                updateCharCount($(this), vendorCodeCharCount, 20);
                validateTextInput($(this), $('#vendorCodeValidation'), 'Vendor Code', 2, 20, /^[a-zA-Z0-9\-_]+$/);
                updateSubmitButton();
            });

            contactPersonInput.on('input keyup paste', function() {
                updateCharCount($(this), contactPersonCharCount, 100);
                validateTextInput($(this), $('#contactPersonValidation'), 'Contact Person Name', 0, 100, /^[a-zA-Z\s\-\.]*$/);
                updateSubmitButton();
            });

            contactEmailInput.on('input keyup paste', function() {
                updateCharCount($(this), contactEmailCharCount, 100);
                validateEmail($(this), $('#contactEmailValidation'));
                updateSubmitButton();
            });

            mobile1Input.on('input keyup paste', function() {
                validatePhone($(this), $('#mobile1Validation'), 'Mobile Number One', 10, 10);
                updateSubmitButton();
            });

            mobile2Input.on('input keyup paste', function() {
                validatePhone($(this), $('#mobile2Validation'), 'Mobile Number Two', 10, 10);
                updateSubmitButton();
            });

            phone1Input.on('input keyup paste', function() {
                validatePhone($(this), $('#phone1Validation'), 'Phone Number One', 10, 11);
                updateSubmitButton();
            });

            phone2Input.on('input keyup paste', function() {
                validatePhone($(this), $('#phone2Validation'), 'Phone Number Two', 10, 11);
                updateSubmitButton();
            });

            // Debounced combination check
            let combinationCheckTimeout;
            function debouncedCombinationCheck() {
                clearTimeout(combinationCheckTimeout);
                combinationCheckTimeout = setTimeout(checkHospitalNameCodeCombination, 500);
            }

            // Bind events to both hospital name and code inputs
            hospNameInput.on('input keyup blur', debouncedCombinationCheck);
            hospCodeInput.on('input keyup blur', debouncedCombinationCheck);

            // Initialize character counts and validation
            updateCharCount(hospNameInput, hospNameCharCount, 120);
            updateCharCount(hospCodeInput, hospCodeCharCount, 20);
            updateCharCount(specialityInput, specialityCharCount, 100);
            updateCharCount(addressInput, addressCharCount, 500);
            updateCharCount(descriptionInput, descriptionCharCount, 500);
            updateCharCount(vendorNameInput, vendorNameCharCount, 120);
            updateCharCount(vendorCodeInput, vendorCodeCharCount, 20);
            updateCharCount(contactPersonInput, contactPersonCharCount, 100);
            updateCharCount(contactEmailInput, contactEmailCharCount, 100);

            // Update submit button on page load
            updateSubmitButton();

            // Prevent form submission if validation fails
            form.on('submit', function(e) {
                if (isCheckingCombination) {
                    e.preventDefault();
                    return false;
                }

                // Final check for any visible errors
                if ($('.field-validation-error:visible').length > 0) {
                    e.preventDefault();
                    return false;
                }

                // Double-check for dangerous input before submission
                const inputs = [hospNameInput, hospCodeInput, specialityInput, addressInput, descriptionInput, vendorNameInput, vendorCodeInput, contactPersonInput, contactEmailInput];
                for (let input of inputs) {
                    if (containsDangerousInput(input.val())) {
                        e.preventDefault();
                        alert('Invalid input detected. Please remove any script tags or unsafe characters.');
                        return false;
                    }
                }
            });

            // Prevent pasting of dangerous content
            function handleDangerousPaste(input, inputName) {
                input.on('paste', function(e) {
                    setTimeout(function() {
                        const pastedContent = input.val();
                        if (containsDangerousInput(pastedContent)) {
                            input.val('');
                            alert('Pasted content in ' + inputName + ' contains unsafe characters and has been removed.');
                        }
                    }, 10);
                });
            }

            // Apply paste protection to all text inputs
            handleDangerousPaste(hospNameInput, 'Hospital Name');
            handleDangerousPaste(hospCodeInput, 'Hospital Code');
            handleDangerousPaste(specialityInput, 'Speciality');
            handleDangerousPaste(addressInput, 'Address');
            handleDangerousPaste(descriptionInput, 'Description');
            handleDangerousPaste(vendorNameInput, 'Vendor Name');
            handleDangerousPaste(vendorCodeInput, 'Vendor Code');
            handleDangerousPaste(contactPersonInput, 'Contact Person Name');
            handleDangerousPaste(contactEmailInput, 'Contact Email');
        });
    </script>
}