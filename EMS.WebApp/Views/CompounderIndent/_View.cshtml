@model EMS.WebApp.Data.CompounderIndent

@{
    bool isCompounderInventoryMode = ViewBag.IsCompounderInventoryMode == true;
}

<div class="row mb-3">
    <div class="col-md-4">
        <label class="form-label">Indent ID</label>
        <input class="form-control rounded-2" value="@Model.IndentId" readonly />
    </div>

    <div class="col-md-4">
        <label class="form-label">Indent Type</label>
        <input class="form-control rounded-2" value="@Model.IndentType" readonly />
    </div>

    <div class="col-md-4">
        <label class="form-label">Status</label>
        <div class="form-control rounded-2 border-0 d-flex align-items-center">
            @{
                var statusClass = Model.Status switch
                {
                    "Draft" => "bg-secondary",
                    "Pending" => "bg-warning",
                    "Approved" => "bg-success",
                    "Rejected" => "bg-danger",
                    _ => "bg-secondary"
                };
                var statusIcon = Model.Status switch
                {
                    "Draft" => "bi-file-text",
                    "Pending" => "bi-clock",
                    "Approved" => "bi-check-circle",
                    "Rejected" => "bi-x-circle",
                    _ => "bi-question-circle"
                };
            }
            <span class="badge @statusClass">
                <i class="@statusIcon me-1"></i>@Model.Status
            </span>
        </div>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-4">
        <label class="form-label">Indent Raised Date</label>
        <input class="form-control rounded-2" value="@Model.IndentDate.ToString("dd/MM/yyyy")" readonly />
    </div>

    <div class="col-md-4">
        <label class="form-label">Created Date</label>
        <input class="form-control rounded-2" value="@Model.CreatedDate.ToString("dd/MM/yyyy HH:mm")" readonly />
    </div>
    <div class="col-md-4">
        <label class="form-label">Created By</label>
        <input class="form-control rounded-2" value="@(Model.CreatedBy ?? "N/A")" readonly />
    </div>
</div>

@* Show draft information if status is Draft *@
@if (Model.Status == "Draft")
{
    <div class="row mb-3">
        <div class="col-12">
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                <strong>Draft Status:</strong> This indent is still in draft mode. The creator can continue editing and submit it when ready.
            </div>
        </div>
    </div>
}

@* Show approval/rejection details if status is not Pending or Draft *@
@if (Model.Status != "Pending" && Model.Status != "Draft")
{
    <div class="row mb-3">
        <div class="col-md-4">
            <label class="form-label">@(Model.Status == "Approved" ? "Approved By" : "Rejected By")</label>
            <input class="form-control rounded-2" value="@(Model.ApprovedBy ?? "N/A")" readonly />
        </div>
        <div class="col-md-4">
            <label class="form-label">@(Model.Status == "Approved" ? "Approved Date" : "Rejected Date")</label>
            <input class="form-control rounded-2" value="@(Model.ApprovedDate?.ToString("dd/MM/yyyy HH:mm") ?? "N/A")" readonly />
        </div>
        <div class="col-md-4"></div>
    </div>

    @if (!string.IsNullOrEmpty(Model.Comments))
    {
        <div class="row mb-3">
            <div class="col-12">
                <label class="form-label">@(Model.Status == "Approved" ? "Approval" : "Rejection") Comments</label>
                <div class="alert @(Model.Status == "Approved" ? "alert-success" : "alert-danger") mb-0">
                    <i class="bi @(Model.Status == "Approved" ? "bi-check-circle" : "bi-x-circle") me-2"></i>
                    @Model.Comments
                </div>
            </div>
        </div>
    }
}

@if (Model.CompounderIndentItems?.Any() == true)
{
    <div class="row mb-3">
        <div class="col-12">
            <label class="form-label"><strong>Medicines (@Model.CompounderIndentItems.Count() items)</strong></label>
            <div class="table-responsive">
                <table class="table table-striped table-glass glass-table w-100 align-middle">
                    <thead class="table-light">
                        <tr>
                            <th style="width:40px">Sl.</th>
                            <th style="width:160px">Medicine Name</th>
                            <th style="width:120px">Company Name</th>
                            <th style="width:100px">Vendor Code</th>
                            <th style="width:80px">Raised Qty</th>
                            <th style="width:80px">Received Qty</th>
                            <th style="width:80px">Pending Qty</th>
                            @if (Model.CompounderIndentItems.Any(i => i.UnitPrice.HasValue))
                            {
                                <th style="width:100px">Unit Price</th>
                                <th style="width:120px">Total Amount</th>
                            }
                            @if (isCompounderInventoryMode)
                            {
                                <th style="width:100px">Batch No</th>
                                <th style="width:100px">Expiry Date</th>
                                <th style="width:100px">Available Stock</th>
                            }
                            <th style="width:120px">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.CompounderIndentItems.Count; i++)
                        {
                            var item = Model.CompounderIndentItems.ElementAt(i);
                            <tr>
                                <td>@(i + 1)</td>
                                <td>@item.MedMaster?.MedItemName</td>
                                <td>@(item.MedMaster?.CompanyName ?? "Not Defined")</td>
                                <td>@item.VendorCode</td>
                                <td class="text-center">@item.RaisedQuantity</td>
                                <td class="text-center">@item.ReceivedQuantity</td>
                                <td class="text-center">
                                    <span class="badge @(item.PendingQuantity > 0 ? "bg-warning" : "bg-success")">
                                        @item.PendingQuantity
                                    </span>
                                </td>
                                @if (Model.CompounderIndentItems.Any(i => i.UnitPrice.HasValue))
                                {
                                    <td class="text-end">@(item.UnitPrice?.ToString("₹#,##0.00") ?? "-")</td>
                                    <td class="text-end">@(item.TotalAmount?.ToString("₹#,##0.00") ?? "-")</td>
                                }
                                @if (isCompounderInventoryMode)
                                {
                                    <td class="text-center">@(item.BatchNo ?? "-")</td>
                                    <td class="text-center">
                                        @if (item.ExpiryDate.HasValue)
                                        {
                                            var daysToExpiry = (item.ExpiryDate.Value - DateTime.Today).Days;
                                            var expiryClass = daysToExpiry <= 30 ? "text-danger" : daysToExpiry <= 90 ? "text-warning" : "text-success";
                                            <span class="@expiryClass" title="@(daysToExpiry > 0 ? $"Expires in {daysToExpiry} days" : $"Expired {Math.Abs(daysToExpiry)} days ago")">
                                                @item.ExpiryDate.Value.ToString("dd/MM/yyyy")
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @if (item.AvailableStock.HasValue)
                                        {
                                            <span class="badge @(item.AvailableStock.Value > 0 ? "bg-primary" : "bg-secondary")">
                                                @item.AvailableStock.Value
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                }
                                <td>
                                    @* Show edit buttons based on pending quantity and status *@
                                    @if (item.PendingQuantity > 0 && isCompounderInventoryMode)
                                    {
                                        <button class="btn btn-sm btn-secondary edit-medicine-inline" data-id="@item.IndentItemId" title="Update Medicine Item">
                                            <i class="bi bi-pencil"></i> Edit
                                        </button>
                                    }
                                    else if (item.PendingQuantity == 0 && isCompounderInventoryMode)
                                    {
                                        <button class="btn btn-sm btn-warning edit-medicine-with-reason" data-id="@item.IndentItemId" title="Edit with Reason">
                                            <i class="bi bi-pencil-square"></i> Edit with Reason
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="text-muted">View Only</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                    @if (Model.CompounderIndentItems.Any(i => i.TotalAmount.HasValue) && !isCompounderInventoryMode)
                    {
                        <tfoot class="table-secondary">
                            <tr>
                                <th colspan="@(Model.CompounderIndentItems.Any(i => i.UnitPrice.HasValue) ? (isCompounderInventoryMode ? "12" : "9") : (isCompounderInventoryMode ? "10" : "7"))" class="text-end">
                                    <strong>Total Amount:</strong>
                                </th>
                                <th class="text-end">
                                    <strong>@Model.CompounderIndentItems.Sum(i => i.TotalAmount ?? 0).ToString("₹#,##0.00")</strong>
                                </th>
                            </tr>
                        </tfoot>
                    }
                </table>
            </div>
        </div>
    </div>
}
else
{
    <div class="row mb-3">
        <div class="col-12">
            <label class="form-label"><strong>Medicines</strong></label>
            <div class="alert alert-info mb-0">
                <i class="bi bi-info-circle me-2"></i>No medicines have been added to this indent yet.
            </div>
        </div>
    </div>
}

<div class="text-end">
    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
</div>

<script>
    $(document).ready(function() {
        const isCompounderInventoryMode = @(isCompounderInventoryMode ? "true" : "false");

        // Handle edit medicine item inline (normal edit)
        $('.edit-medicine-inline').click(function() {
            const itemId = $(this).data('id');
            const row = $(this).closest('tr');

            convertRowToEditMode(row, itemId);
        });

        // Handle edit medicine item with reason
        $(document).on('click', '.edit-medicine-with-reason', function() {
            const itemId = $(this).data('id');
            const row = $(this).closest('tr');

            // Extract current item data
            const itemData = {
                indentItemId: itemId,
                medicineName: row.find('td:eq(1)').text().trim(),
                companyName: row.find('td:eq(2)').text().trim(),
                vendorCode: row.find('td:eq(3)').text().trim(),
                raisedQuantity: parseInt(row.find('td:eq(4)').text()) || 0,
                receivedQuantity: parseInt(row.find('td:eq(5)').text()) || 0,
                unitPrice: extractUnitPrice(row),
                batchNo: extractBatchNo(row),
                expiryDate: extractExpiryDate(row),
                availableStock: extractAvailableStock(row)
            };

            // Show edit with reason modal
            showEditWithReasonModal(itemData);
        });

        function extractUnitPrice(row) {
            const hasUnitPriceColumns = row.find('td').length > 11;

            if (hasUnitPriceColumns) {
                const unitPriceIndex = 7;
                const unitPriceText = row.find(`td:eq(${unitPriceIndex})`).text().replace('₹', '').replace(',', '').trim();
                return unitPriceText === '-' ? null : parseFloat(unitPriceText);
            }
            return null;
        }

        function extractBatchNo(row) {
            const hasUnitPriceColumns = row.find('td').length > 11;

            if (isCompounderInventoryMode) {
                const batchNoIndex = hasUnitPriceColumns ? 9 : 7;
                const batchNoText = row.find(`td:eq(${batchNoIndex})`).text().trim();
                return batchNoText === '-' ? null : batchNoText;
            }
            return null;
        }

        function extractExpiryDate(row) {
            const hasUnitPriceColumns = row.find('td').length > 11;

            if (isCompounderInventoryMode) {
                const expiryDateIndex = hasUnitPriceColumns ? 10 : 8;
                const expiryDateText = row.find(`td:eq(${expiryDateIndex})`).text().trim();

                // Convert date from dd/MM/yyyy to yyyy-MM-dd for input[type="date"]
                if (expiryDateText && expiryDateText !== '-') {
                    const dateMatch = expiryDateText.match(/(\d{2})\/(\d{2})\/(\d{4})/);
                    if (dateMatch) {
                        const [, day, month, year] = dateMatch;
                        return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                    }
                }
            }
            return null;
        }

        function extractAvailableStock(row) {
            const hasUnitPriceColumns = row.find('td').length > 11;

            if (isCompounderInventoryMode) {
                const availableStockIndex = hasUnitPriceColumns ? 11 : 9;
                const availableStockText = row.find(`td:eq(${availableStockIndex})`).text().trim();
                return availableStockText === '-' ? null : parseInt(availableStockText) || null;
            }
            return null;
        }

        // Refresh medicine table function
        window.refreshMedicineTable = function() {
            // Reload the current page to show updated data
            location.reload();
        };

        function convertRowToEditMode(row, itemId) {
            const currentReceivedQty = parseInt(row.find('td:eq(5)').text()) || 0;
            const raisedQty = parseInt(row.find('td:eq(4)').text()) || 0;

            // Find column indices based on what columns are present
            const hasUnitPriceColumns = row.find('td').length > 11;

            let unitPriceIndex = -1;
            let totalAmountIndex = -1;
            let batchNoIndex = -1;
            let expiryDateIndex = -1;
            let availableStockIndex = -1;

            if (hasUnitPriceColumns && isCompounderInventoryMode) {
                // Has unit price + batch/expiry/available stock columns
                unitPriceIndex = 7;
                totalAmountIndex = 8;
                batchNoIndex = 9;
                expiryDateIndex = 10;
                availableStockIndex = 11;
            } else if (hasUnitPriceColumns && !isCompounderInventoryMode) {
                // Has unit price but no batch/expiry/available stock columns
                unitPriceIndex = 7;
                totalAmountIndex = 8;
            } else if (!hasUnitPriceColumns && isCompounderInventoryMode) {
                // No unit price but has batch/expiry/available stock columns
                batchNoIndex = 7;
                expiryDateIndex = 8;
                availableStockIndex = 9;
            }

            let currentUnitPrice = '';
            if (hasUnitPriceColumns) {
                const unitPriceText = row.find(`td:eq(${unitPriceIndex})`).text().replace('₹', '').replace(',', '').trim();
                currentUnitPrice = unitPriceText === '-' ? '' : unitPriceText;
            }

            let currentBatchNo = '';
            let currentExpiryDate = '';
            let currentAvailableStock = '';
            if (isCompounderInventoryMode) {
                currentBatchNo = row.find(`td:eq(${batchNoIndex})`).text().trim();
                const currentExpiryDateText = row.find(`td:eq(${expiryDateIndex})`).text().trim();
                currentAvailableStock = row.find(`td:eq(${availableStockIndex})`).text().trim();

                // Convert date from dd/MM/yyyy to yyyy-MM-dd for input[type="date"]
                if (currentExpiryDateText && currentExpiryDateText !== '-') {
                    // Extract just the date part (ignore any HTML elements)
                    const dateMatch = currentExpiryDateText.match(/(\d{2})\/(\d{2})\/(\d{4})/);
                    if (dateMatch) {
                        const [, day, month, year] = dateMatch;
                        currentExpiryDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                    }
                }
            }

            // Store original row content
            row.data('original-content', row.html());

            // Replace received quantity with input
            row.find('td:eq(5)').html(`
                <input type="number" class="form-control form-control-sm edit-received-qty"
                       value="${currentReceivedQty}" min="0" max="${raisedQty}" />
            `);

            // Replace unit price with input (if unit price column exists)
            if (hasUnitPriceColumns) {
                row.find(`td:eq(${unitPriceIndex})`).html(`
                    <input type="number" class="form-control form-control-sm edit-unit-price"
                           value="${currentUnitPrice}" min="0" step="0.01" placeholder="Unit Price" />
                `);
            }

            // Replace batch number, expiry date, and available stock with inputs (only if Compounder Inventory mode)
            if (isCompounderInventoryMode) {
                row.find(`td:eq(${batchNoIndex})`).html(`
                    <input class="form-control form-control-sm edit-batch-no"
                           value="${currentBatchNo === '-' ? '' : currentBatchNo}" placeholder="Batch No" />
                `);

                row.find(`td:eq(${expiryDateIndex})`).html(`
                    <input type="date" class="form-control form-control-sm edit-expiry-date"
                           value="${currentExpiryDate}" />
                `);

                row.find(`td:eq(${availableStockIndex})`).html(`
                    <input type="number" class="form-control form-control-sm edit-available-stock"
                           value="${currentAvailableStock === '-' ? '' : currentAvailableStock}" min="0" placeholder="Available Stock" />
                `);
            }

            // Replace action button with save/cancel
            const actionColumnIndex = row.find('td').length - 1;
            row.find(`td:eq(${actionColumnIndex})`).html(`
                <button class="btn btn-sm btn-success save-medicine-inline me-1" data-id="${itemId}" title="Save Changes">
                    <i class="bi bi-check"></i> Save
                </button>
                <button class="btn btn-sm btn-secondary cancel-medicine-inline" title="Cancel">
                    <i class="bi bi-x"></i> Cancel
                </button>
            `);

            // Auto-calculate pending quantity and total amount
            updateCalculatedFields(row, raisedQty, hasUnitPriceColumns);

            // Add event listeners for auto-calculation
            row.find('.edit-received-qty, .edit-unit-price').on('input', function() {
                updateCalculatedFields(row, raisedQty, hasUnitPriceColumns);
            });
        }

        function updateCalculatedFields(row, raisedQty, hasUnitPriceColumns) {
            const receivedQty = parseInt(row.find('.edit-received-qty').val()) || 0;
            const unitPrice = parseFloat(row.find('.edit-unit-price').val()) || 0;
            const pendingQty = Math.max(0, raisedQty - receivedQty);

            // Update pending quantity
            row.find('td:eq(6)').html(`
                <span class="badge ${pendingQty > 0 ? 'bg-warning' : 'bg-success'}">
                    ${pendingQty}
                </span>
            `);

            // Update total amount (if column exists)
            if (hasUnitPriceColumns) {
                const totalAmount = receivedQty * unitPrice;
                const totalAmountIndex = 8;
                row.find(`td:eq(${totalAmountIndex})`).text(totalAmount > 0 ? `₹${totalAmount.toFixed(2)}` : '-');
            }
        }

        // Save medicine item inline
        $(document).on('click', '.save-medicine-inline', function() {
            const itemId = $(this).data('id');
            const row = $(this).closest('tr');
            const receivedQty = parseInt(row.find('.edit-received-qty').val()) || 0;
            const unitPrice = parseFloat(row.find('.edit-unit-price').val()) || null;
            const batchNo = row.find('.edit-batch-no').val() ? row.find('.edit-batch-no').val().trim() : null;
            const expiryDate = row.find('.edit-expiry-date').val() || null;
            const availableStock = row.find('.edit-available-stock').val() ? parseInt(row.find('.edit-available-stock').val()) : null;
            const raisedQty = parseInt(row.find('td:eq(4)').text()) || 0;

            // Validate received quantity
            if (receivedQty > raisedQty) {
                alert('Received quantity cannot exceed raised quantity.');
                return;
            }

            // Validate available stock
            if (availableStock !== null && availableStock < 0) {
                alert('Available stock cannot be negative.');
                return;
            }

            // Disable button to prevent double submission
            $(this).prop('disabled', true);

            // Prepare AJAX data
            const ajaxData = {
                indentItemId: itemId,
                receivedQuantity: receivedQty,
                unitPrice: unitPrice
            };

            // Only include batch no, expiry date, and available stock if in Compounder Inventory mode
            if (isCompounderInventoryMode) {
                ajaxData.batchNo = batchNo;
                ajaxData.expiryDate = expiryDate;
                ajaxData.availableStock = availableStock;
            }

            // Update via AJAX
            $.post('@Url.Action("UpdateMedicineItem", "CompounderIndent")', ajaxData)
            .done(function(response) {
                if (response.success) {
                    const hasUnitPriceColumns = row.find('td').length > 11;

                    // Update row with new values
                    row.find('td:eq(5)').text(response.data.receivedQuantity);
                    row.find('td:eq(6)').html(`
                        <span class="badge ${response.data.pendingQuantity > 0 ? 'bg-warning' : 'bg-success'}">
                            ${response.data.pendingQuantity}
                        </span>
                    `);

                    // Update unit price and total amount if columns exist
                    if (hasUnitPriceColumns) {
                        const unitPriceIndex = 7;
                        const totalAmountIndex = 8;

                        row.find(`td:eq(${unitPriceIndex})`).text(response.data.unitPrice ? `₹${response.data.unitPrice.toFixed(2)}` : '-');
                        row.find(`td:eq(${totalAmountIndex})`).text(response.data.totalAmount ? `₹${response.data.totalAmount.toFixed(2)}` : '-');

                        // Update batch number, expiry date, and available stock if Compounder Inventory mode
                        if (isCompounderInventoryMode) {
                            const batchNoIndex = 9;
                            const expiryDateIndex = 10;
                            const availableStockIndex = 11;

                            row.find(`td:eq(${batchNoIndex})`).text(response.data.batchNo || '-');

                            // Update expiry date with color coding
                            if (response.data.expiryDate) {
                                const expiryDate = new Date(response.data.expiryDate);
                                const daysToExpiry = Math.ceil((expiryDate - new Date()) / (1000 * 60 * 60 * 24));
                                const expiryClass = daysToExpiry <= 30 ? 'text-danger' : daysToExpiry <= 90 ? 'text-warning' : 'text-success';
                                const title = daysToExpiry > 0 ? `Expires in ${daysToExpiry} days` : `Expired ${Math.abs(daysToExpiry)} days ago`;
                                row.find(`td:eq(${expiryDateIndex})`).html(`
                                    <span class="${expiryClass}" title="${title}">
                                        ${expiryDate.toLocaleDateString('en-GB')}
                                    </span>
                                `);
                            } else {
                                row.find(`td:eq(${expiryDateIndex})`).html('<span class="text-muted">-</span>');
                            }

                            // Update available stock
                            if (response.data.availableStock !== null) {
                                row.find(`td:eq(${availableStockIndex})`).html(`
                                    <span class="badge ${response.data.availableStock > 0 ? 'bg-primary' : 'bg-secondary'}">
                                        ${response.data.availableStock}
                                    </span>
                                `);
                            } else {
                                row.find(`td:eq(${availableStockIndex})`).html('<span class="text-muted">-</span>');
                            }
                        }
                    } else if (isCompounderInventoryMode) {
                        // No unit price columns but has batch/expiry/available stock columns
                        const batchNoIndex = 7;
                        const expiryDateIndex = 8;
                        const availableStockIndex = 9;

                        row.find(`td:eq(${batchNoIndex})`).text(response.data.batchNo || '-');

                        // Update expiry date with color coding
                        if (response.data.expiryDate) {
                            const expiryDate = new Date(response.data.expiryDate);
                            const daysToExpiry = Math.ceil((expiryDate - new Date()) / (1000 * 60 * 60 * 24));
                            const expiryClass = daysToExpiry <= 30 ? 'text-danger' : daysToExpiry <= 90 ? 'text-warning' : 'text-success';
                            const title = daysToExpiry > 0 ? `Expires in ${daysToExpiry} days` : `Expired ${Math.abs(daysToExpiry)} days ago`;
                            row.find(`td:eq(${expiryDateIndex})`).html(`
                                <span class="${expiryClass}" title="${title}">
                                    ${expiryDate.toLocaleDateString('en-GB')}
                                </span>
                            `);
                        } else {
                            row.find(`td:eq(${expiryDateIndex})`).html('<span class="text-muted">-</span>');
                        }

                        // Update available stock
                        if (response.data.availableStock !== null) {
                            row.find(`td:eq(${availableStockIndex})`).html(`
                                <span class="badge ${response.data.availableStock > 0 ? 'bg-primary' : 'bg-secondary'}">
                                    ${response.data.availableStock}
                                </span>
                            `);
                        } else {
                            row.find(`td:eq(${availableStockIndex})`).html('<span class="text-muted">-</span>');
                        }
                    }

                    // Restore action button based on pending quantity
                    const actionColumnIndex = row.find('td').length - 1;
                    if (response.data.pendingQuantity > 0) {
                        row.find(`td:eq(${actionColumnIndex})`).html(`
                            <button class="btn btn-sm btn-secondary edit-medicine-inline" data-id="${itemId}" title="Update Medicine Item">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                        `);
                    } else {
                        row.find(`td:eq(${actionColumnIndex})`).html(`
                            <button class="btn btn-sm btn-warning edit-medicine-with-reason" data-id="${itemId}" title="Edit with Reason">
                                <i class="bi bi-pencil-square"></i> Edit with Reason
                            </button>
                        `);
                    }

                    // Show success message
                    if (typeof showMessage === 'function') {
                        showMessage(response.message, 'success');
                    }

                    // Reload main table if available
                    if (typeof tbl !== 'undefined' && tbl.ajax) {
                        tbl.ajax.reload();
                    }
                } else {
                    alert(response.message || 'Failed to update medicine item.');
                    // Re-enable button
                    $(this).prop('disabled', false);
                }
            })
            .fail(function(xhr, status, error) {
                console.error('Update medicine item request failed:', status, error);
                alert('Network error occurred. Please try again.');
                // Re-enable button
                $(this).prop('disabled', false);
            });
        });

        // Cancel medicine item inline edit
        $(document).on('click', '.cancel-medicine-inline', function() {
            const row = $(this).closest('tr');
            const originalContent = row.data('original-content');

            if (originalContent) {
                row.html(originalContent);
                row.removeData('original-content');
            }
        });
    });
</script>

@* Include Edit with Reason Modal *@
@await Html.PartialAsync("_EditWithReasonModal")