@model dynamic

<div class="modal fade" id="editWithReasonModal" tabindex="-1" aria-labelledby="editWithReasonModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editWithReasonModalLabel">
                    <i class="bi bi-pencil-square me-2"></i>Update Medicine Information
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <form id="editWithReasonForm">
                    <input type="hidden" id="editReasonIndentItemId" />

                    <!-- Medicine Details (Read-only) -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Medicine Name</label>
                            <input type="text" class="form-control" id="editReasonMedicineName" readonly />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Company Name</label>
                            <input type="text" class="form-control" id="editReasonCompanyName" readonly />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Vendor Code</label>
                            <input type="text" class="form-control" id="editReasonVendorCode" readonly />
                        </div>
                    </div>

                    <!-- Editable Fields -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="editReasonRaisedQty" class="form-label">Raised Quantity <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="editReasonRaisedQty" min="1" required />
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-4">
                            <label for="editReasonReceivedQty" class="form-label">Received Quantity <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="editReasonReceivedQty" min="0" required />
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Pending Quantity</label>
                            <input type="number" class="form-control" id="editReasonPendingQty" readonly />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="editReasonBatchNo" class="form-label">Batch No</label>
                            <input type="text" class="form-control" id="editReasonBatchNo" placeholder="Enter batch number" />
                        </div>
                        <div class="col-md-4">
                            <label for="editReasonExpiryDate" class="form-label">Expiry Date</label>
                            <input type="date" class="form-control" id="editReasonExpiryDate" />
                        </div>
                        <div class="col-md-4">
                            <label for="editReasonAvailableStock" class="form-label">Available Stock</label>
                            <input type="number" class="form-control" id="editReasonAvailableStock" min="0" placeholder="Enter available stock" />
                            <div class="invalid-feedback"></div>
                        </div>
                    </div>

                    <!-- Reason Field (Required) -->
                    <div class="mb-3">
                        <label for="editReasonText" class="form-label">Reason for Edit <span class="text-danger">*</span></label>
                        <textarea class="form-control" id="editReasonText" rows="3"
                                  placeholder="Please provide a detailed reason for editing this fully received item (minimum 10 characters)"
                                  required></textarea>
                        <div class="invalid-feedback"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveEditWithReason">
                    <i class="bi bi-check-circle me-1"></i>Save
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        let editWithReasonModal;

        // Initialize modal
        function initializeEditWithReasonModal() {
            editWithReasonModal = new bootstrap.Modal(document.getElementById('editWithReasonModal'));
        }

        // Show edit with reason modal
        window.showEditWithReasonModal = function(itemData) {
            if (!editWithReasonModal) {
                initializeEditWithReasonModal();
            }

            // Populate form with current data
            $('#editReasonIndentItemId').val(itemData.indentItemId);
            $('#editReasonMedicineName').val(itemData.medicineName);
            $('#editReasonCompanyName').val(itemData.companyName);
            $('#editReasonVendorCode').val(itemData.vendorCode);
            $('#editReasonRaisedQty').val(itemData.raisedQuantity);
            $('#editReasonReceivedQty').val(itemData.receivedQuantity);
            $('#editReasonBatchNo').val(itemData.batchNo || '');
            $('#editReasonExpiryDate').val(itemData.expiryDate || '');
            $('#editReasonAvailableStock').val(itemData.availableStock || '');
            $('#editReasonText').val('');

            // Calculate pending quantity
            updateCalculatedFields();

            // Clear previous validation
            clearValidation();

            // Show modal
            editWithReasonModal.show();
        };

        // Auto-calculate pending quantity
        $('#editReasonRaisedQty, #editReasonReceivedQty').on('input', function() {
            updateCalculatedFields();
        });

        function updateCalculatedFields() {
            const raisedQty = parseInt($('#editReasonRaisedQty').val()) || 0;
            const receivedQty = parseInt($('#editReasonReceivedQty').val()) || 0;

            const pendingQty = Math.max(0, raisedQty - receivedQty);

            $('#editReasonPendingQty').val(pendingQty);
        }

        // Save edit with reason
        $('#saveEditWithReason').click(function() {
            if (!validateEditWithReasonForm()) {
                return;
            }

            const itemData = {
                indentItemId: $('#editReasonIndentItemId').val(),
                raisedQuantity: parseInt($('#editReasonRaisedQty').val()),
                receivedQuantity: parseInt($('#editReasonReceivedQty').val()),
                unitPrice: null, // No longer used
                batchNo: $('#editReasonBatchNo').val().trim() || null,
                expiryDate: $('#editReasonExpiryDate').val() || null,
                availableStock: $('#editReasonAvailableStock').val() ? parseInt($('#editReasonAvailableStock').val()) : null,
                reason: $('#editReasonText').val().trim()
            };

            // Disable button to prevent double submission
            $(this).prop('disabled', true);

            // Save via AJAX
            $.post('@Url.Action("UpdateMedicineItemWithReason", "CompounderIndent")', itemData)
            .done(function(response) {
                if (response.success) {
                    editWithReasonModal.hide();

                    // Show success message
                    if (typeof showMessage === 'function') {
                        showMessage(response.message, 'success');
                    }

                    // Refresh the view/table
                    if (typeof refreshMedicineTable === 'function') {
                        refreshMedicineTable();
                    } else if (typeof location !== 'undefined') {
                        location.reload();
                    }
                } else {
                    alert(response.message || 'Failed to update medicine item.');
                }
            })
            .fail(function(xhr, status, error) {
                console.error('Update medicine item with reason request failed:', status, error);
                alert('Network error occurred. Please try again.');
            })
            .always(function() {
                $('#saveEditWithReason').prop('disabled', false);
            });
        });

        // Form validation
        function validateEditWithReasonForm() {
            let isValid = true;
            clearValidation();

            const raisedQty = parseInt($('#editReasonRaisedQty').val());
            const receivedQty = parseInt($('#editReasonReceivedQty').val());
            const availableStock = $('#editReasonAvailableStock').val() ? parseInt($('#editReasonAvailableStock').val()) : null;
            const reason = $('#editReasonText').val().trim();

            // Validate raised quantity
            if (!raisedQty || raisedQty <= 0) {
                showFieldError($('#editReasonRaisedQty'), 'Please enter a valid raised quantity');
                isValid = false;
            }

            // Validate received quantity
            if (receivedQty < 0) {
                showFieldError($('#editReasonReceivedQty'), 'Received quantity cannot be negative');
                isValid = false;
            } else if (receivedQty > raisedQty) {
                showFieldError($('#editReasonReceivedQty'), 'Received quantity cannot exceed raised quantity');
                isValid = false;
            }

            // Validate available stock
            if (availableStock !== null && availableStock < 0) {
                showFieldError($('#editReasonAvailableStock'), 'Available stock cannot be negative');
                isValid = false;
            }

            // Validate reason
            if (!reason) {
                showFieldError($('#editReasonText'), 'Please provide a reason for editing');
                isValid = false;
            } else if (reason.length < 10) {
                showFieldError($('#editReasonText'), 'Please provide a detailed reason (minimum 10 characters)');
                isValid = false;
            }

            return isValid;
        }

        function showFieldError(field, message) {
            field.addClass('is-invalid');
            field.siblings('.invalid-feedback').text(message);
        }

        function clearValidation() {
            $('.is-invalid').removeClass('is-invalid');
            $('.invalid-feedback').text('');
        }

        // Close modal cleanup
        $('#editWithReasonModal').on('hidden.bs.modal', function() {
            clearValidation();
            $('#editWithReasonForm')[0].reset();
        });
    });
</script>