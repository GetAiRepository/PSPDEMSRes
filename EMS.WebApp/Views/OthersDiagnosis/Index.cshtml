@model List<EMS.WebApp.Data.OthersDiagnosisListViewModel>
@{
    ViewData["Title"] = "Doctor Diagnosis - Others";
    var isDoctor = ViewBag.IsDoctor ?? false;
    var userRole = ViewBag.UserRole ?? "";
    var shouldMaskData = ViewBag.ShouldMaskData ?? true;
}

<!-- Store masking and role information -->
<input type="hidden" id="shouldMaskData" value="@shouldMaskData.ToString().ToLower()" />
<input type="hidden" id="userRole" value="@userRole" />
<input type="hidden" id="isDoctor" value="@isDoctor.ToString().ToLower()" />

<div id="alertContainer"></div>

<!-- Doctor Diagnosis – List -->
<div class="glass p-4 shadow-sm">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h2 class="h5 mb-0">
                Doctor Diagnosis – Others
                @if (shouldMaskData)
                {
                    <span class="badge bg-warning text-dark ms-2">
                        <i class="bi bi-shield-lock"></i> Limited Access
                    </span>
                }
            </h2>
            @if (shouldMaskData)
            {
                <small class="text-muted d-block mt-1">
                    <i class="bi bi-info-circle me-1"></i>
                    Some features are restricted based on your access level.
                </small>
            }
        </div>

        <div class="d-flex gap-2">
            <!-- Pending Approval Button for Doctors -->
            @if (isDoctor)
            {
                <button class="btn btn-warning btn-sm position-relative" type="button" id="pendingApprovalBtn" style="display: none;">
                    <i class="bi bi-clipboard-check"></i> Pending Approval
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="pendingCount" style="display: none;">
                        0
                    </span>
                </button>
            }

            <!-- ======= NEW: Conditional Add Button based on permissions ======= -->
            @if (!shouldMaskData)
            {
                <a href="@Url.Action("Add", "OthersDiagnosis")" class="btn btn-sm btn-primary">
                    <i class="bi bi-plus-lg"></i> Add Diagnosis
                </a>
            }
            else
            {
                <button class="btn btn-sm btn-secondary" disabled title="You don't have permission to add diagnoses">
                    <i class="bi bi-plus-lg"></i> Add Diagnosis
                </button>
            }
        </div>
    </div>

    <!-- ======= NEW: Access notice for masked users ======= -->
    @if (shouldMaskData)
    {
        <div class="alert alert-info d-flex align-items-center mb-3">
            <i class="bi bi-info-circle me-2"></i>
            <div>
                <strong>Viewing Mode:</strong> You're viewing diagnosis records with limited permissions.
                Some actions are restricted and sensitive data may be hidden.
            </div>
        </div>
    }

    <div class="table-responsive mb-3">
        <table id="tblDiagList" class="table table-sm glass-table card-view w-100 align-middle">
            <thead>
                <tr>
                    <th style="width:70px">Sl.No</th>
                    <th style="width:120px">Treatment&nbsp;ID</th>
                    <th>Patient&nbsp;Name</th>
                    <th style="width:70px">Age</th>
                    <th style="width:120px">Category</th>
                    <th style="width:140px">Visit&nbsp;Date</th>
                    <th style="width:120px">Visit&nbsp;Type</th>
                    <th style="width:100px">Status</th>
                    <th>Diagnosed&nbsp;By</th>
                    <th style="width:140px">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (Model?.Any() == true)
                {
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        <tr>
                            <td>@(i + 1)</td>
                            <td>@Model[i].TreatmentId</td>
                            <td>@Model[i].PatientName</td>
                            <td>@Model[i].Age</td>
                            <td>@Model[i].Category</td>
                            <td>@Model[i].VisitDate.ToString("dd‑MMM‑yyyy")</td>
                            <!-- Visit Type Column -->
                            <td>
                                @if (Model[i].VisitType == "First Aid or Emergency")
                                {
                                    <span class="badge bg-danger">🚨 Emergency</span>
                                }
                                else
                                {
                                    <span class="badge bg-info">Regular</span>
                                }
                            </td>
                            <!-- Approval Status Column -->
                            <td>
                                @switch (Model[i].ApprovalStatus)
                                {
                                    case "Pending":
                                        <span class="badge bg-warning text-dark">
                                            <i class="bi bi-clock"></i> Pending
                                        </span>
                                        break;
                                    case "Approved":
                                        <span class="badge bg-success">
                                            <i class="bi bi-check-circle"></i> Approved
                                        </span>
                                        break;
                                    case "Rejected":
                                        <span class="badge bg-danger">
                                            <i class="bi bi-x-circle"></i> Rejected
                                        </span>
                                        break;
                                    default:
                                        <span class="badge bg-secondary">Unknown</span>
                                        break;
                                }
                            </td>
                            <td>@Model[i].DiagnosedBy</td>
                            <td>
                                <div class="btn-group" role="group">
                                    <a href="@Url.Action("View", "OthersDiagnosis", new { id = Model[i].DiagnosisId })"
                                       class="btn btn-sm btn-outline-primary" title="View Details">
                                        <i class="bi bi-eye me-1"></i>View
                                    </a>

                                    <!-- ======= NEW: Show delete only for users with permissions and non-pending items ======= -->
                                    @if (!shouldMaskData && (Model[i].ApprovalStatus != "Pending" || isDoctor))
                                    {
                                        <form method="post" action="@Url.Action("Delete", "OthersDiagnosis")" class="d-inline"
                                              onsubmit="return confirm('Are you sure you want to delete this diagnosis record?')">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="id" value="@Model[i].DiagnosisId" />
                                            <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete">
                                                <i class="bi bi-trash"></i>Del
                                            </button>
                                        </form>
                                    }
                                    else if (shouldMaskData)
                                    {
                                        <button class="btn btn-sm btn-outline-secondary" disabled title="Insufficient permissions">
                                            <i class="bi bi-shield-lock"></i>
                                        </button>
                                    }
                                    else if (Model[i].ApprovalStatus == "Pending" && !isDoctor)
                                    {
                                        <button class="btn btn-sm btn-outline-secondary" disabled title="Cannot delete pending diagnosis">
                                            <i class="bi bi-lock"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="10" class="text-center text-muted">
                            No diagnosis records found.
                            @if (!shouldMaskData)
                            {
                                <br>
                        
                                <small>
                                    <a href="@Url.Action("Add", "OthersDiagnosis")" class="text-decoration-none">
                                        <i class="bi bi-plus-circle me-1"></i>Add the first diagnosis record
                                    </a>
                                </small>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- ======= NEW: Summary information with access level indicators ======= -->
@*     @if (Model?.Any() == true)
    {
        <div class="row mt-3">
            <div class="col-md-6">
                <div class="glass p-3">
                    <h6 class="mb-2 text-muted">
                        <i class="bi bi-graph-up me-2"></i>Summary
                    </h6>
                    <div class="row g-2 small">
                        <div class="col-6">
                            <div class="text-center">
                                <div class="h5 text-primary mb-1">@Model.Count</div>
                                <div class="text-muted">Total Records</div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="text-center">
                                <div class="h5 text-warning mb-1">@Model.Count(d => d.ApprovalStatus == "Pending")</div>
                                <div class="text-muted">Pending</div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="text-center">
                                <div class="h5 text-success mb-1">@Model.Count(d => d.ApprovalStatus == "Approved")</div>
                                <div class="text-muted">Approved</div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="text-center">
                                <div class="h5 text-danger mb-1">@Model.Count(d => d.VisitType == "First Aid or Emergency")</div>
                                <div class="text-muted">Emergency</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="glass p-3">
                    <h6 class="mb-2 text-muted">
                        <i class="bi bi-person-badge me-2"></i>Your Access Level
                    </h6>
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            @if (isDoctor)
                            {
                                <span class="badge bg-success fs-6">
                                    <i class="bi bi-check-shield"></i> Doctor
                                </span>
                            }
                            else if (!shouldMaskData)
                            {
                                <span class="badge bg-info fs-6">
                                    <i class="bi bi-check-circle"></i> @userRole
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-warning text-dark fs-6">
                                    <i class="bi bi-shield-lock"></i> Limited
                                </span>
                            }
                        </div>
                        <div class="small">
                            @if (isDoctor)
                            {
                                <div class="text-success">✓ Full access to all records</div>
                                <div class="text-success">✓ Can approve/reject diagnoses</div>
                            }
                            else if (!shouldMaskData)
                            {
                                <div class="text-info">✓ Can create and modify records</div>
                                <div class="text-muted">✗ Cannot approve diagnoses</div>
                            }
                            else
                            {
                                <div class="text-warning">✓ Can view records</div>
                                <div class="text-muted">✗ Limited modification access</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div> *@

<!-- Pending Approvals Modal -->
<div class="modal fade" id="pendingApprovalsModal" tabindex="-1" aria-labelledby="pendingApprovalsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="pendingApprovalsModalLabel">
                    <i class="bi bi-clipboard-check"></i> Pending Diagnosis Approvals
                    <span class="badge bg-warning ms-2" id="pendingModalBadge">0 Pending</span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="max-height: 70vh; overflow-y: auto;" id="pendingApprovalsModalBody">
                <!-- Content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle"></i> Close
                </button>
                <button type="button" class="btn btn-success" id="approveAllSelectedBtn" disabled>
                    <i class="bi bi-check-all"></i> Approve All Selected
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Reject Reason Modal -->
<div class="modal fade" id="rejectReasonModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="bi bi-x-circle"></i> Reject Diagnosis
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="rejectionReason" class="form-label">Rejection Reason <span class="text-danger">*</span></label>
                    <textarea class="form-control" id="rejectionReason" rows="4"
                              placeholder="Please provide a detailed reason for rejecting this diagnosis..."
                              required></textarea>
                    <div class="form-text">Minimum 10 characters required</div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmRejectBtn">
                    <i class="bi bi-x-circle"></i> Reject Diagnosis
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentDiagnosisId = null; // For rejection modal

        // ======= NEW: Get all access control variables =======
        const isDoctor = $('#isDoctor').val() === 'true';
        const shouldMaskData = $('#shouldMaskData').val() === 'true';
        const userRole = $('#userRole').val();

        console.log('🔒 Index Access Control:', {
            isDoctor: isDoctor,
            shouldMaskData: shouldMaskData,
            userRole: userRole
        });

        $(document).ready(function() {
            // Initialize pending approval functionality for doctors only
            if (isDoctor) {
                checkUserRoleAndInitialize();
            }

            // ======= NEW: Show access level notifications =======
            if (shouldMaskData) {
                console.log('🔒 User has limited access - some features disabled');
            } else if (isDoctor) {
                console.log('👩‍⚕️ Doctor access - full permissions');
            } else {
                console.log('👷 Staff access - standard permissions');
            }

            // Pending Approval button click
            $('#pendingApprovalBtn').on('click', function() {
                loadPendingApprovals();
            });

            // Modal event handlers
            setupModalEventHandlers();
        });

        function setupModalEventHandlers() {
            // Select All functionality
            $('#pendingApprovalsModal').on('change', '#selectAllCheckbox', function() {
                const isChecked = $(this).is(':checked');
                $('.diagnosis-checkbox').prop('checked', isChecked);
                updateApproveButtonState();
            });

            // Individual checkbox change
            $('#pendingApprovalsModal').on('change', '.diagnosis-checkbox', function() {
                updateApproveButtonState();

                // Update "Select All" checkbox state
                const totalCheckboxes = $('.diagnosis-checkbox').length;
                const checkedCheckboxes = $('.diagnosis-checkbox:checked').length;

                $('#selectAllCheckbox').prop('indeterminate', checkedCheckboxes > 0 && checkedCheckboxes < totalCheckboxes);
                $('#selectAllCheckbox').prop('checked', checkedCheckboxes === totalCheckboxes);
            });

            // Select All button
            $('#pendingApprovalsModal').on('click', '#selectAllBtn', function() {
                const allChecked = $('.diagnosis-checkbox:checked').length === $('.diagnosis-checkbox').length;
                $('.diagnosis-checkbox').prop('checked', !allChecked);
                $('#selectAllCheckbox').prop('checked', !allChecked);
                updateApproveButtonState();
            });

            // Individual approve
            $('#pendingApprovalsModal').on('click', '.approve-btn', function() {
                const diagnosisId = $(this).data('diagnosis-id');
                approveDiagnosis(diagnosisId);
            });

            // Individual reject
            $('#pendingApprovalsModal').on('click', '.reject-btn', function() {
                currentDiagnosisId = $(this).data('diagnosis-id');
                $('#rejectionReason').val('');
                $('#rejectReasonModal').modal('show');
            });

            // Approve all selected
            $('#pendingApprovalsModal').on('click', '#approveAllBtn, #approveAllSelectedBtn', function() {
                const selectedIds = $('.diagnosis-checkbox:checked').map(function() {
                    return parseInt($(this).val());
                }).get();

                if (selectedIds.length === 0) {
                    showAlert('warning', 'Please select at least one diagnosis to approve.');
                    return;
                }

                approveMultipleDiagnoses(selectedIds);
            });

            // Confirm reject
            $('#confirmRejectBtn').on('click', function() {
                const reason = $('#rejectionReason').val().trim();

                if (reason.length < 10) {
                    showAlert('error', 'Please provide a detailed rejection reason (minimum 10 characters).');
                    return;
                }

                rejectDiagnosis(currentDiagnosisId, reason);
            });
        }

        // Approval Functions
        function checkUserRoleAndInitialize() {
            // Check if user is doctor and show pending approval button
            $.ajax({
                url: '@Url.Action("GetPendingApprovalCount", "OthersDiagnosis")',
                type: 'GET',
                success: function(response) {
                    if (response.success) {
                        // User is doctor, show the button and update count
                        $('#pendingApprovalBtn').show();
                        updatePendingCount(response.count);

                        // Auto-refresh pending count every 30 seconds
                        setInterval(updatePendingApprovalCount, 30000);
                    }
                    // If not doctor or error, button remains hidden
                },
                error: function() {
                    // Button remains hidden on error
                    console.log('Failed to check user role or get pending count');
                }
            });
        }

        function updatePendingApprovalCount() {
            $.ajax({
                url: '@Url.Action("GetPendingApprovalCount", "OthersDiagnosis")',
                type: 'GET',
                success: function(response) {
                    if (response.success) {
                        updatePendingCount(response.count);
                    }
                },
                error: function() {
                    console.log('Failed to update pending count');
                }
            });
        }

        function updatePendingCount(count) {
            const badge = $('#pendingCount');
            if (count > 0) {
                badge.text(count).show();
                $('#pendingApprovalBtn').removeClass('btn-warning').addClass('btn-danger');
            } else {
                badge.hide();
                $('#pendingApprovalBtn').removeClass('btn-danger').addClass('btn-warning');
            }
        }

        function loadPendingApprovals() {
            $.ajax({
                url: '@Url.Action("PendingApprovals", "OthersDiagnosis")',
                type: 'GET',
                success: function(response) {
                    if (typeof response === 'string') {
                        // Response is HTML (partial view)
                        $('#pendingApprovalsModalBody').html(response);

                        // Update modal badge
                        const pendingCount = $('.diagnosis-checkbox').length;
                        $('#pendingModalBadge').text(pendingCount + ' Pending');

                        // Show/hide footer button based on content
                        if (pendingCount > 0) {
                            $('#approveAllSelectedBtn').show();
                        } else {
                            $('#approveAllSelectedBtn').hide();
                        }

                        $('#pendingApprovalsModal').modal('show');
                    } else if (response.success === false) {
                        showAlert('error', response.message);
                    }
                },
                error: function() {
                    showAlert('error', 'Error loading pending approvals.');
                }
            });
        }

        function updateApproveButtonState() {
            const hasSelected = $('.diagnosis-checkbox:checked').length > 0;
            $('#approveAllBtn, #approveAllSelectedBtn').prop('disabled', !hasSelected);
        }

        function approveDiagnosis(diagnosisId) {
            if (!diagnosisId) return;

            $.ajax({
                url: '@Url.Action("ApproveDiagnosis", "OthersDiagnosis")',
                type: 'POST',
                data: { diagnosisId: diagnosisId },
                success: function(response) {
                    if (response.success) {
                        showAlert('success', response.message);
                        // Remove the row from the table
                        $(`tr[data-diagnosis-id="${diagnosisId}"]`).fadeOut(function() {
                            $(this).remove();
                            updateModalAfterAction();
                        });
                        // Refresh main page
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showAlert('error', response.message);
                    }
                },
                error: function() {
                    showAlert('error', 'Error approving diagnosis.');
                }
            });
        }

        function rejectDiagnosis(diagnosisId, reason) {
            if (!diagnosisId || !reason) return;

            $.ajax({
                url: '@Url.Action("RejectDiagnosis", "OthersDiagnosis")',
                type: 'POST',
                data: {
                    diagnosisId: diagnosisId,
                    rejectionReason: reason
                },
                success: function(response) {
                    if (response.success) {
                        showAlert('success', response.message);
                        $('#rejectReasonModal').modal('hide');
                        // Remove the row from the table
                        $(`tr[data-diagnosis-id="${diagnosisId}"]`).fadeOut(function() {
                            $(this).remove();
                            updateModalAfterAction();
                        });
                        // Refresh main page
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showAlert('error', response.message);
                    }
                },
                error: function() {
                    showAlert('error', 'Error rejecting diagnosis.');
                }
            });
        }

        function approveMultipleDiagnoses(diagnosisIds) {
            if (!diagnosisIds || diagnosisIds.length === 0) return;

            $.ajax({
                url: '@Url.Action("ApproveAllDiagnoses", "OthersDiagnosis")',
                type: 'POST',
                data: { diagnosisIds: diagnosisIds },
                success: function(response) {
                    if (response.success) {
                        showAlert('success', response.message);
                        // Remove approved rows
                        diagnosisIds.forEach(function(id) {
                            $(`tr[data-diagnosis-id="${id}"]`).fadeOut(function() {
                                $(this).remove();
                                updateModalAfterAction();
                            });
                        });
                        // Refresh main page
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showAlert('error', response.message);
                    }
                },
                error: function() {
                    showAlert('error', 'Error approving diagnoses.');
                }
            });
        }

        function updateModalAfterAction() {
            // Update badge count
            const remainingCount = $('tbody tr[data-diagnosis-id]').length;
            $('#pendingModalBadge').text(remainingCount + ' Pending');

            // If no more pending, show empty state
            if (remainingCount === 0) {
                $('#pendingApprovalsModalBody').html(`
                    <div class="text-center py-5">
                        <i class="bi bi-check-circle text-success" style="font-size: 3rem;"></i>
                        <h5 class="mt-3">All Diagnoses Processed</h5>
                        <p class="text-muted">No more pending approvals.</p>
                    </div>
                `);
                $('#approveAllSelectedBtn').hide();
            }

            // Reset checkboxes
            $('#selectAllCheckbox').prop('checked', false).prop('indeterminate', false);
            updateApproveButtonState();

            // Update main page pending count
            updatePendingApprovalCount();
        }

        function showAlert(type, message) {
            const alertClass = type === 'success' ? 'alert-success' :
                              type === 'info' ? 'alert-info' :
                              type === 'warning' ? 'alert-warning' : 'alert-danger';
            const alertId = 'alert-' + Date.now();
            const alertHtml = '<div id="' + alertId + '" class="alert ' + alertClass + ' alert-dismissible fade show" role="alert">' +
                message +
                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
            '</div>';

            $('#alertContainer').html(alertHtml);

            setTimeout(function() {
                const alertEl = document.getElementById(alertId);
                if (alertEl) {
                    bootstrap.Alert.getOrCreateInstance(alertEl).close();
                }
            }, 4000);
        }

        // Show success/error messages from TempData
        @if (TempData["Success"] != null)
        {
                            <text>
                            $(document).ready(function() {
                                showAlert('success', '@TempData["Success"]');
                            });
                            </text>
        }

        @if (TempData["Error"] != null)
        {
                            <text>
                            $(document).ready(function() {
                                showAlert('error', '@TempData["Error"]');
                            });
                            </text>
        }
    </script>
}

<style>
    .glass {
        --glass-bg: rgba(255, 255, 255, 0.30) !important;
    }

    .glass-table {
        background: var(--glass-bg);
        backdrop-filter: blur(6px);
    }

        .glass-table th {
            background: rgba(255, 255, 255, 0.1);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .glass-table td {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

    .btn-group .btn {
        margin-right: 2px;
    }

    /* Pending Approval Button Styles */
    #pendingApprovalBtn {
        transition: all 0.3s ease;
        font-weight: 500;
    }

        #pendingApprovalBtn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        #pendingApprovalBtn.btn-danger {
            animation: pulse 2s infinite;
        }

    @@keyframes pulse {
        0%

    {
        box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.7);
    }

    70% {
        box-shadow: 0 0 0 10px rgba(220, 53, 69, 0);
    }

    100% {
        box-shadow: 0 0 0 0 rgba(220, 53, 69, 0);
    }

    }

    #pendingCount {
        font-size: 0.7rem;
        min-width: 18px;
        height: 18px;
        line-height: 18px;
    }

    /* Status badge styles */
    .badge {
        font-size: 0.75rem;
        font-weight: 500;
    }

        /* Visit type specific colors */
        .badge.bg-danger {
            background-color: #dc3545 !important;
        }

        .badge.bg-info {
            background-color: #0dcaf0 !important;
        }

        /* Approval status colors */
        .badge.bg-warning.text-dark {
            background-color: #ffc107 !important;
            color: #212529 !important;
        }

        .badge.bg-success {
            background-color: #198754 !important;
        }

    /* Table hover effects */
    .glass-table tbody tr:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }

    /* Modal improvements */
    .modal-header.bg-primary {
        border-bottom: none;
    }

    .modal-header.bg-danger {
        border-bottom: none;
    }

    .btn-close-white {
        filter: invert(1);
    }

    /* ======= NEW: Access level and masking styles ======= */
    .btn[disabled] {
        opacity: 0.6;
        cursor: not-allowed;
    }

    /* Access level indicators */
    .badge.fs-6 {
        font-size: 1rem !important;
        padding: 0.5rem 0.75rem;
    }

    /* Summary card styling */
    .glass h6 {
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        padding-bottom: 0.5rem;
    }

    /* Limited access styling */
    .badge.bg-warning.text-dark {
        font-weight: 600;
    }

    .alert-info {
        border-left: 4px solid #0dcaf0;
    }

    /* Access control icons */
    .bi-shield-lock {
        font-size: 0.9em;
    }

    .bi-check-shield, .bi-check-circle {
        font-size: 0.9em;
    }

    /* Button state indicators */
    .btn-secondary[disabled] {
        background-color: #6c757d;
        border-color: #6c757d;
        opacity: 0.65;
    }

    .btn-outline-secondary[disabled] {
        color: #6c757d;
        border-color: #6c757d;
        opacity: 0.65;
    }

    /* Responsive improvements */
    @@media (max-width: 768px) {
        .table-responsive

    {
        font-size: 0.8rem;
    }

    .badge {
        font-size: 0.65rem;
        padding: 0.25em 0.4em;
    }

    .btn-sm {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }

    /* Stack access level info on mobile */
    .badge.fs-6 {
        font-size: 0.8rem !important;
        padding: 0.4rem 0.6rem;
    }

    /* Make summary cards stack better */
    .row.g-2 .col-6 {
        margin-bottom: 0.5rem;
    }

    }

    /* Visual feedback for restricted actions */
    .btn[title*="permission"], .btn[title*="access"] {
        position: relative;
    }

        .btn[title*="permission"]:hover::after,
        .btn[title*="access"]:hover::after {
            content: "🔒";
            position: absolute;
            top: -5px;
            right: -5px;
            font-size: 0.7em;
            animation: bounce 0.5s infinite;
        }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100%

    {
        transform: translateY(0);
    }

    40% {
        transform: translateY(-3px);
    }

    60% {
        transform: translateY(-2px);
    }

    }
</style>