@model EMS.WebApp.Data.org_plant
@if (ViewBag.Error != null)
{
    <div class="alert alert-warning">
        @ViewBag.Error
    </div>
}
<form asp-action="@(Model.plant_id == 0 ? "Create" : "Edit")" method="post" id="orgPlantForm">
    @Html.AntiForgeryToken()

    <input asp-for="plant_id" type="hidden" />
    <input type="hidden" id="checkUrlHidden" value="@Url.Action("CheckPlantCodeExists", "PlantMaster")" />

    <!-- Display general validation message -->
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label asp-for="plant_code" class="form-label">@Html.DisplayNameFor(m => m.plant_code) <span class="text-danger">*</span></label>
            <input asp-for="plant_code" class="form-control rounded-2 glass" id="plantCodeInput" maxlength="20" placeholder="Enter plant code" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="plant_code" class="text-danger" id="plantCodeValidation"></span>
                <small class="text-muted">
                    <span id="plantCodeCharCount">0</span>/20 characters
                </small>
            </div>
        </div>

        <div class="col-md-6">
            <label asp-for="plant_name" class="form-label">@Html.DisplayNameFor(m => m.plant_name) <span class="text-danger">*</span></label>
            <input asp-for="plant_name" class="form-control rounded-2 glass" id="plantNameInput" maxlength="120" placeholder="Enter plant name" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="plant_name" class="text-danger" id="plantNameValidation"></span>
                <small class="text-muted">
                    <span id="plantNameCharCount">0</span>/120 characters
                </small>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
            <label asp-for="Description" class="form-label">@Html.DisplayNameFor(m => m.Description)</label>
            <textarea asp-for="Description" class="form-control rounded-2 glass" rows="3" id="plantDescTextarea" maxlength="250" placeholder="Enter plant description (optional)"></textarea>
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="Description" class="text-danger" id="plantDescValidation"></span>
                <small class="text-muted">
                    <span id="charCount">0</span>/250 characters
                </small>
            </div>
        </div>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary" id="submitBtn">
            @(Model.plant_id == 0 ? "Save" : "Update")
        </button>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script type="text/javascript">
        $(document).ready(function() {
            // Form elements
            const form = $('#orgPlantForm');
            const submitBtn = $('#submitBtn');
            const plantCodeInput = $('#plantCodeInput');
            const plantNameInput = $('#plantNameInput');
            const plantDescTextarea = $('#plantDescTextarea');
            const plantId = $('#plant_id').val();

            // Character count elements
            const plantCodeCharCount = $('#plantCodeCharCount');
            const plantNameCharCount = $('#plantNameCharCount');
            const charCount = $('#charCount');

            // Validation flags
            let isCheckingCode = false;

            // Initialize validation
            form.removeData("validator");
            form.removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);

            // Security patterns to check for
            const dangerousPatterns = [
                /<script[^>]*>.*?<\/script>/gi,
                /javascript:/gi,
                /vbscript:/gi,
                /on\w+\s*=/gi,
                /<iframe/gi,
                /<object/gi,
                /<embed/gi,
                /<form/gi,
                /eval\s*\(/gi,
                /expression\s*\(/gi
            ];

            // Function to check for dangerous input
            function containsDangerousInput(text) {
                if (!text) return false;
                return dangerousPatterns.some(pattern => pattern.test(text));
            }

            // Character count functions
            function updateCharCount(input, countElement, maxLength) {
                const currentLength = input.val().length;
                countElement.text(currentLength);
                countElement.removeClass('text-warning text-danger');
                const warningThreshold = maxLength * 0.8;
                if (currentLength > warningThreshold && currentLength < maxLength) {
                    countElement.addClass('text-warning');
                } else if (currentLength >= maxLength) {
                    countElement.addClass('text-danger');
                }
            }

            // Validation functions
            function validatePlantCode() {
                const plantCode = plantCodeInput.val().trim();
                const validationSpan = $('#plantCodeValidation');
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                plantCodeInput.removeClass('is-invalid');

                if (!plantCode) {
                    validationSpan.text('Plant Code is required.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    plantCodeInput.addClass('is-invalid');
                    isValid = false;
                } else if (plantCode.length < 2) {
                    validationSpan.text('Plant Code must be at least 2 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    plantCodeInput.addClass('is-invalid');
                    isValid = false;
                } else if (plantCode.length > 20) {
                    validationSpan.text('Plant Code cannot exceed 20 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    plantCodeInput.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(plantCode)) {
                    validationSpan.text('Plant Code contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    plantCodeInput.addClass('is-invalid');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\-_]+$/.test(plantCode)) {
                    validationSpan.text('Plant Code can only contain letters, numbers, hyphens, and underscores.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    plantCodeInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            function validatePlantName() {
                const plantName = plantNameInput.val().trim();
                const validationSpan = $('#plantNameValidation');
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                plantNameInput.removeClass('is-invalid');

                if (!plantName) {
                    validationSpan.text('Plant Name is required.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    plantNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (plantName.length < 2) {
                    validationSpan.text('Plant Name must be at least 2 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    plantNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (plantName.length > 120) {
                    validationSpan.text('Plant Name cannot exceed 120 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    plantNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(plantName)) {
                    validationSpan.text('Plant Name contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    plantNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\s\-_\.\(\)\[\]]+$/.test(plantName)) {
                    validationSpan.text('Plant Name can only contain letters, numbers, spaces, hyphens, underscores, dots, parentheses, and brackets.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    plantNameInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            function validateDescription() {
                const description = plantDescTextarea.val();
                const validationSpan = $('#plantDescValidation');
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                plantDescTextarea.removeClass('is-invalid');

                if (description && description.length > 250) {
                    validationSpan.text('Description cannot exceed 250 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    plantDescTextarea.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(description)) {
                    validationSpan.text('Description contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    plantDescTextarea.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            // Real-time validation for plant code uniqueness
            function checkPlantCodeUniqueness() {
                const plantCode = plantCodeInput.val().trim();
                const validationSpan = $('#plantCodeValidation');

                if (!plantCode || !validatePlantCode()) {
                    updateSubmitButton();
                    return;
                }

                if (isCheckingCode) return;

                isCheckingCode = true;
                submitBtn.prop('disabled', true);

                const checkUrl = $('#checkUrlHidden').val();
                $.post(checkUrl, {
                    plantCode: plantCode,
                    plantId: plantId || null
                })
                .done(function(response) {
                    if (response.exists) {
                        validationSpan.text('A plant with this code already exists. Please choose a different code.')
                                     .addClass('field-validation-error text-danger')
                                     .show();
                        plantCodeInput.addClass('is-invalid');
                        submitBtn.prop('disabled', true);
                    } else {
                        if (validatePlantCode()) {
                            validationSpan.text('').removeClass('field-validation-error').hide();
                            plantCodeInput.removeClass('is-invalid');
                        }
                        updateSubmitButton();
                    }
                })
                .fail(function() {
                    console.log('Error checking plant code uniqueness');
                    updateSubmitButton();
                })
                .always(function() {
                    isCheckingCode = false;
                });
            }

            function updateSubmitButton() {
                const hasErrors = $('.field-validation-error:visible').length > 0 ||
                                $('.is-invalid').length > 0 ||
                                isCheckingCode;
                submitBtn.prop('disabled', hasErrors);
            }

            // Event handlers
            plantCodeInput.on('input keyup paste', function() {
                updateCharCount($(this), plantCodeCharCount, 20);
                validatePlantCode();
                updateSubmitButton();
            });

            plantNameInput.on('input keyup paste', function() {
                updateCharCount($(this), plantNameCharCount, 120);
                validatePlantName();
                updateSubmitButton();
            });

            plantDescTextarea.on('input keyup paste', function() {
                updateCharCount($(this), charCount, 250);
                validateDescription();
                updateSubmitButton();
            });

            // Debounced plant code uniqueness check
            let codeCheckTimeout;
            plantCodeInput.on('input keyup', function() {
                clearTimeout(codeCheckTimeout);
                codeCheckTimeout = setTimeout(checkPlantCodeUniqueness, 500);
            });

            // Initialize on page load
            updateCharCount(plantCodeInput, plantCodeCharCount, 20);
            updateCharCount(plantNameInput, plantNameCharCount, 120);
            updateCharCount(plantDescTextarea, charCount, 250);
            validatePlantCode();
            validatePlantName();
            validateDescription();
            updateSubmitButton();

            // Prevent form submission if validation fails
            form.on('submit', function(e) {
                if (!validatePlantCode() || !validatePlantName() || !validateDescription() || isCheckingCode) {
                    e.preventDefault();
                    return false;
                }

                // Final check for any visible errors
                if ($('.field-validation-error:visible').length > 0) {
                    e.preventDefault();
                    return false;
                }

                // Double-check for dangerous input before submission
                const plantCode = plantCodeInput.val().trim();
                const plantName = plantNameInput.val().trim();
                const description = plantDescTextarea.val();

                if (containsDangerousInput(plantCode) || containsDangerousInput(plantName) || containsDangerousInput(description)) {
                    e.preventDefault();
                    alert('Invalid input detected. Please remove any script tags or unsafe characters.');
                    return false;
                }
            });

            // Prevent pasting of dangerous content
            function handleDangerousPaste(input, inputName) {
                input.on('paste', function(e) {
                    setTimeout(function() {
                        const pastedContent = input.val();
                        if (containsDangerousInput(pastedContent)) {
                            input.val('');
                            alert('Pasted content in ' + inputName + ' contains unsafe characters and has been removed.');
                        }
                    }, 10);
                });
            }

            handleDangerousPaste(plantCodeInput, 'Plant Code');
            handleDangerousPaste(plantNameInput, 'Plant Name');
            handleDangerousPaste(plantDescTextarea, 'Description');
        });
    </script>
}