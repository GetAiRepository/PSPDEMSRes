@model EMS.WebApp.Data.MedExamCategory
@if (ViewBag.Error != null)
{
    <div class="alert alert-warning">
        @ViewBag.Error
    </div>
}
<form asp-action="@(Model.CatId==0? "Create":"Edit")" method="post" id="medExamCategoryForm">
    @Html.AntiForgeryToken()

    <input asp-for="CatId" type="hidden" />
    <input type="hidden" id="checkUrlHidden" value="@Url.Action("CheckCategoryDetailsExists", "MedExamCategory")" />

    <!-- Display general validation message -->
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="row g-3">
        <div class="col-md-6">
            <label asp-for="CatName" class="form-label">Category Name <span class="text-danger">*</span></label>
            <input asp-for="CatName" class="form-control rounded-2 glass" id="catNameInput" maxlength="100" placeholder="Enter category name" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="CatName" class="text-danger" id="catNameValidation"></span>
                <small class="text-muted">
                    <span id="catNameCharCount">0</span>/100 characters
                </small>
            </div>
        </div>

        <div class="col-md-2">
            <label asp-for="YearsFreq" class="form-label">Years Frequency <span class="text-danger">*</span></label>
            <input asp-for="YearsFreq" type="number" class="form-control rounded-2 glass" id="yearsFreqInput" min="1" max="10" placeholder="1-10" />
            <span asp-validation-for="YearsFreq" class="text-danger" id="yearsFreqValidation"></span>
        </div>

        <div class="col-md-4">
            <label asp-for="AnnuallyRule" class="form-label">Annually Rule <span class="text-danger">*</span></label>
            <input asp-for="AnnuallyRule" class="form-control rounded-2 glass" id="annuallyRuleInput" maxlength="10" placeholder="Enter annually rule" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="AnnuallyRule" class="text-danger" id="annuallyRuleValidation"></span>
                <small class="text-muted">
                    <span id="annuallyRuleCharCount">0</span>/10 characters
                </small>
            </div>
        </div>

        <div class="col-md-6">
            <label asp-for="MonthsSched" class="form-label">Months Schedule <span class="text-danger">*</span></label>
            <input asp-for="MonthsSched" class="form-control rounded-2 glass" id="monthsSchedInput" maxlength="50" placeholder="Enter months schedule" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="MonthsSched" class="text-danger" id="monthsSchedValidation"></span>
                <small class="text-muted">
                    <span id="monthsSchedCharCount">0</span>/50 characters
                </small>
            </div>
        </div>

        <div class="col-md-6">
            <label asp-for="Remarks" class="form-label">Remarks</label>
            <textarea asp-for="Remarks" class="form-control rounded-2 glass" rows="2" id="remarksInput" maxlength="200" placeholder="Enter remarks (optional)"></textarea>
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="Remarks" class="text-danger" id="remarksValidation"></span>
                <small class="text-muted">
                    <span id="remarksCharCount">0</span>/200 characters
                </small>
            </div>
        </div>
    </div>

    <div class="modal-footer mt-3">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary" id="submitBtn">
            @(Model.CatId == 0 ? "Save" : "Update")
        </button>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script type="text/javascript">
        $(document).ready(function() {
            // Form elements
            const form = $('#medExamCategoryForm');
            const submitBtn = $('#submitBtn');
            const catNameInput = $('#catNameInput');
            const yearsFreqInput = $('#yearsFreqInput');
            const annuallyRuleInput = $('#annuallyRuleInput');
            const monthsSchedInput = $('#monthsSchedInput');
            const remarksInput = $('#remarksInput');
            const catId = $('#CatId').val();

            // Character count elements
            const catNameCharCount = $('#catNameCharCount');
            const annuallyRuleCharCount = $('#annuallyRuleCharCount');
            const monthsSchedCharCount = $('#monthsSchedCharCount');
            const remarksCharCount = $('#remarksCharCount');

            // Validation flags
            let isCheckingCombination = false;

            // Initialize validation
            form.removeData("validator");
            form.removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);

            // Security patterns to check for
            const dangerousPatterns = [
                /<script[^>]*>.*?<\/script>/gi,
                /javascript:/gi,
                /vbscript:/gi,
                /on\w+\s*=/gi,
                /<iframe/gi,
                /<object/gi,
                /<embed/gi,
                /<form/gi,
                /eval\s*\(/gi,
                /expression\s*\(/gi
            ];

            // Function to check for dangerous input
            function containsDangerousInput(text) {
                if (!text) return false;
                return dangerousPatterns.some(pattern => pattern.test(text));
            }

            // Character count functions
            function updateCharCount(input, countElement, maxLength) {
                const currentLength = input.val().length;
                countElement.text(currentLength);
                countElement.removeClass('text-warning text-danger');
                const warningThreshold = maxLength * 0.8;
                if (currentLength > warningThreshold && currentLength < maxLength) {
                    countElement.addClass('text-warning');
                } else if (currentLength >= maxLength) {
                    countElement.addClass('text-danger');
                }
            }

            // Individual field validation functions
            function validateCategoryName() {
                const catName = catNameInput.val().trim();
                const validationSpan = $('#catNameValidation');
                let isValid = true;

                // Clear non-combination validation errors
                if (!validationSpan.text().includes('combination')) {
                    validationSpan.text('').removeClass('field-validation-error').hide();
                    catNameInput.removeClass('is-invalid');
                }

                if (!catName) {
                    validationSpan.text('Category Name is required.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    catNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (catName.length < 2) {
                    validationSpan.text('Category Name must be at least 2 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    catNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (catName.length > 100) {
                    validationSpan.text('Category Name cannot exceed 100 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    catNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(catName)) {
                    validationSpan.text('Category Name contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    catNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\s\-_\.\(\)\[\]]+$/.test(catName)) {
                    validationSpan.text('Category Name can only contain letters, numbers, spaces, hyphens, underscores, dots, parentheses, and brackets.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    catNameInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            function validateYearsFreq() {
                const yearsFreq = parseInt(yearsFreqInput.val()) || 0;
                const validationSpan = $('#yearsFreqValidation');
                let isValid = true;

                // Clear non-combination validation errors
                if (!validationSpan.text().includes('combination')) {
                    validationSpan.text('').removeClass('field-validation-error').hide();
                    yearsFreqInput.removeClass('is-invalid');
                }

                if (yearsFreq === 0) {
                    validationSpan.text('Years Frequency is required.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    yearsFreqInput.addClass('is-invalid');
                    isValid = false;
                } else if (yearsFreq < 1 || yearsFreq > 10) {
                    validationSpan.text('Years Frequency must be between 1 and 10.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    yearsFreqInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            function validateAnnuallyRule() {
                const annuallyRule = annuallyRuleInput.val().trim();
                const validationSpan = $('#annuallyRuleValidation');
                let isValid = true;

                // Clear non-combination validation errors
                if (!validationSpan.text().includes('combination')) {
                    validationSpan.text('').removeClass('field-validation-error').hide();
                    annuallyRuleInput.removeClass('is-invalid');
                }

                if (!annuallyRule) {
                    validationSpan.text('Annually Rule is required.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    annuallyRuleInput.addClass('is-invalid');
                    isValid = false;
                } else if (annuallyRule.length < 1) {
                    validationSpan.text('Annually Rule must be at least 1 character.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    annuallyRuleInput.addClass('is-invalid');
                    isValid = false;
                } else if (annuallyRule.length > 10) {
                    validationSpan.text('Annually Rule cannot exceed 10 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    annuallyRuleInput.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(annuallyRule)) {
                    validationSpan.text('Annually Rule contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    annuallyRuleInput.addClass('is-invalid');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\-_]+$/.test(annuallyRule)) {
                    validationSpan.text('Annually Rule can only contain letters, numbers, hyphens, and underscores.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    annuallyRuleInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            function validateMonthsSched() {
                const monthsSched = monthsSchedInput.val().trim();
                const validationSpan = $('#monthsSchedValidation');
                let isValid = true;

                // Clear non-combination validation errors
                if (!validationSpan.text().includes('combination')) {
                    validationSpan.text('').removeClass('field-validation-error').hide();
                    monthsSchedInput.removeClass('is-invalid');
                }

                if (!monthsSched) {
                    validationSpan.text('Months Schedule is required.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    monthsSchedInput.addClass('is-invalid');
                    isValid = false;
                } else if (monthsSched.length < 1) {
                    validationSpan.text('Months Schedule must be at least 1 character.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    monthsSchedInput.addClass('is-invalid');
                    isValid = false;
                } else if (monthsSched.length > 50) {
                    validationSpan.text('Months Schedule cannot exceed 50 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    monthsSchedInput.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(monthsSched)) {
                    validationSpan.text('Months Schedule contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    monthsSchedInput.addClass('is-invalid');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\s\-_\.\,]+$/.test(monthsSched)) {
                    validationSpan.text('Months Schedule can only contain letters, numbers, spaces, hyphens, underscores, dots, and commas.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    monthsSchedInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            function validateRemarks() {
                const remarks = remarksInput.val();
                const validationSpan = $('#remarksValidation');
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                remarksInput.removeClass('is-invalid');

                if (remarks && remarks.length > 200) {
                    validationSpan.text('Remarks cannot exceed 200 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    remarksInput.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(remarks)) {
                    validationSpan.text('Remarks contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    remarksInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            // Combined validation for unique combination
            function checkCategoryDetailsCombination() {
                const catName = catNameInput.val().trim();
                const yearsFreq = parseInt(yearsFreqInput.val()) || 0;
                const annuallyRule = annuallyRuleInput.val().trim();
                const monthsSched = monthsSchedInput.val().trim();

                const catNameValidation = $('#catNameValidation');
                const yearsFreqValidation = $('#yearsFreqValidation');
                const annuallyRuleValidation = $('#annuallyRuleValidation');
                const monthsSchedValidation = $('#monthsSchedValidation');

                // Clear previous combination errors
                catNameValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();
                yearsFreqValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();
                annuallyRuleValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();
                monthsSchedValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();

                // First validate individual fields
                const catNameValid = validateCategoryName();
                const yearsFreqValid = validateYearsFreq();
                const annuallyRuleValid = validateAnnuallyRule();
                const monthsSchedValid = validateMonthsSched();

                if (!catNameValid || !yearsFreqValid || !annuallyRuleValid || !monthsSchedValid) {
                    updateSubmitButton();
                    return;
                }

                if (!catName || !yearsFreq || !annuallyRule || !monthsSched) {
                    updateSubmitButton();
                    return;
                }

                if (isCheckingCombination) return;

                isCheckingCombination = true;
                submitBtn.prop('disabled', true);

                const checkUrl = $('#checkUrlHidden').val();
                $.post(checkUrl, {
                    catName: catName,
                    yearsFreq: yearsFreq,
                    annuallyRule: annuallyRule,
                    monthsSched: monthsSched,
                    catId: catId || null
                })
                .done(function(response) {
                    if (response.exists) {
                        const errorMessage = 'This category combination already exists.';

                        // Show error on all relevant fields
                        catNameValidation.text(errorMessage)
                                        .addClass('field-validation-error text-danger')
                                        .show();
                        yearsFreqValidation.text(errorMessage)
                                          .addClass('field-validation-error text-danger')
                                          .show();
                        annuallyRuleValidation.text(errorMessage)
                                             .addClass('field-validation-error text-danger')
                                             .show();
                        monthsSchedValidation.text(errorMessage)
                                            .addClass('field-validation-error text-danger')
                                            .show();

                        catNameInput.addClass('is-invalid');
                        yearsFreqInput.addClass('is-invalid');
                        annuallyRuleInput.addClass('is-invalid');
                        monthsSchedInput.addClass('is-invalid');
                        submitBtn.prop('disabled', true);
                    } else {
                        // Clear combination errors only
                        catNameValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();
                        yearsFreqValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();
                        annuallyRuleValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();
                        monthsSchedValidation.filter(':contains("combination")').text('').removeClass('field-validation-error').hide();

                        updateSubmitButton();
                    }
                })
                .fail(function() {
                    console.log('Error checking category combination');
                    updateSubmitButton();
                })
                .always(function() {
                    isCheckingCombination = false;
                });
            }

            function updateSubmitButton() {
                const hasErrors = $('.field-validation-error:visible').length > 0 ||
                                $('.is-invalid').length > 0 ||
                                isCheckingCombination;
                submitBtn.prop('disabled', hasErrors);
            }

            // Event handlers
            catNameInput.on('input keyup paste', function() {
                updateCharCount($(this), catNameCharCount, 100);
                validateCategoryName();
                updateSubmitButton();
            });

            yearsFreqInput.on('input change', function() {
                validateYearsFreq();
                updateSubmitButton();
            });

            annuallyRuleInput.on('input keyup paste', function() {
                updateCharCount($(this), annuallyRuleCharCount, 10);
                validateAnnuallyRule();
                updateSubmitButton();
            });

            monthsSchedInput.on('input keyup paste', function() {
                updateCharCount($(this), monthsSchedCharCount, 50);
                validateMonthsSched();
                updateSubmitButton();
            });

            remarksInput.on('input keyup paste', function() {
                updateCharCount($(this), remarksCharCount, 200);
                validateRemarks();
                updateSubmitButton();
            });

            // Debounced combination check
            let combinationCheckTimeout;
            function debouncedCombinationCheck() {
                clearTimeout(combinationCheckTimeout);
                combinationCheckTimeout = setTimeout(checkCategoryDetailsCombination, 500);
            }

            // Bind events to all relevant inputs for combination check
            catNameInput.on('input keyup blur', debouncedCombinationCheck);
            yearsFreqInput.on('input change blur', debouncedCombinationCheck);
            annuallyRuleInput.on('input keyup blur', debouncedCombinationCheck);
            monthsSchedInput.on('input keyup blur', debouncedCombinationCheck);

            // Initialize on page load
            updateCharCount(catNameInput, catNameCharCount, 100);
            updateCharCount(annuallyRuleInput, annuallyRuleCharCount, 10);
            updateCharCount(monthsSchedInput, monthsSchedCharCount, 50);
            updateCharCount(remarksInput, remarksCharCount, 200);
            validateCategoryName();
            validateYearsFreq();
            validateAnnuallyRule();
            validateMonthsSched();
            validateRemarks();
            updateSubmitButton();

            // Prevent form submission if validation fails
            form.on('submit', function(e) {
                if (!validateCategoryName() || !validateYearsFreq() || !validateAnnuallyRule() ||
                    !validateMonthsSched() || !validateRemarks() || isCheckingCombination) {
                    e.preventDefault();
                    return false;
                }

                // Final check for any visible errors
                if ($('.field-validation-error:visible').length > 0) {
                    e.preventDefault();
                    return false;
                }

                // Double-check for dangerous input before submission
                const catName = catNameInput.val().trim();
                const annuallyRule = annuallyRuleInput.val().trim();
                const monthsSched = monthsSchedInput.val().trim();
                const remarks = remarksInput.val();

                if (containsDangerousInput(catName) || containsDangerousInput(annuallyRule) ||
                    containsDangerousInput(monthsSched) || containsDangerousInput(remarks)) {
                    e.preventDefault();
                    alert('Invalid input detected. Please remove any script tags or unsafe characters.');
                    return false;
                }
            });

            // Prevent pasting of dangerous content
            function handleDangerousPaste(input, inputName) {
                input.on('paste', function(e) {
                    setTimeout(function() {
                        const pastedContent = input.val();
                        if (containsDangerousInput(pastedContent)) {
                            input.val('');
                            alert('Pasted content in ' + inputName + ' contains unsafe characters and has been removed.');
                        }
                    }, 10);
                });
            }

            handleDangerousPaste(catNameInput, 'Category Name');
            handleDangerousPaste(annuallyRuleInput, 'Annually Rule');
            handleDangerousPaste(monthsSchedInput, 'Months Schedule');
            handleDangerousPaste(remarksInput, 'Remarks');
        });
    </script>
}