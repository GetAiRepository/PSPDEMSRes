@model EMS.WebApp.Data.org_department
@if (ViewBag.Error != null)
{
    <div class="alert alert-warning">
        @ViewBag.Error
    </div>
}
<form asp-action="@(Model.dept_id == 0 ? "Create" : "Edit")" method="post" id="OrgDepartmentForm">
    @Html.AntiForgeryToken()

    <input asp-for="dept_id" type="hidden" />
    <input type="hidden" id="checkUrlHidden" value="@Url.Action("CheckDepartmentNameExists", "DepartmentMaster")" />

    <!-- Display general validation message -->
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="row mb-3">
        <div class="col-md-12">
            <label asp-for="dept_name" class="form-label">@Html.DisplayNameFor(m => m.dept_name) <span class="text-danger">*</span></label>
            <input asp-for="dept_name" class="form-control rounded-2 glass" id="deptNameInput" maxlength="120" placeholder="Enter department name" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="dept_name" class="text-danger" id="deptNameValidation"></span>
                <small class="text-muted">
                    <span id="deptNameCharCount">0</span>/120 characters
                </small>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
            <label asp-for="dept_description" class="form-label">@Html.DisplayNameFor(m => m.dept_description)</label>
            <textarea asp-for="dept_description" class="form-control rounded-2 glass" rows="3" id="dptDescTextarea" maxlength="250" placeholder="Enter department description (optional)"></textarea>
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="dept_description" class="text-danger" id="deptDescValidation"></span>
                <small class="text-muted">
                    <span id="charCount">0</span>/250 characters
                </small>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
            <label asp-for="Remarks" class="form-label">@Html.DisplayNameFor(m => m.Remarks)</label>
            <textarea asp-for="Remarks" class="form-control rounded-2 glass" rows="3" id="remarksTextarea" maxlength="250" placeholder="Enter remarks (optional)"></textarea>
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="Remarks" class="text-danger" id="remarksValidation"></span>
                <small class="text-muted">
                    <span id="remarksCharCount">0</span>/250 characters
                </small>
            </div>
        </div>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary" id="submitBtn">
            @(Model.dept_id == 0 ? "Save" : "Update")
        </button>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script type="text/javascript">
        $(document).ready(function() {
            // Form elements
            const form = $('#OrgDepartmentForm');
            const submitBtn = $('#submitBtn');
            const deptNameInput = $('#deptNameInput');
            const dptDescTextarea = $('#dptDescTextarea');
            const remarksTextarea = $('#remarksTextarea');
            const deptId = $('#dept_id').val();

            // Character count elements
            const deptNameCharCount = $('#deptNameCharCount');
            const charCount = $('#charCount');
            const remarksCharCount = $('#remarksCharCount');

            // Validation flags
            let isCheckingName = false;

            // Initialize validation
            form.removeData("validator");
            form.removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);

            // Security patterns to check for
            const dangerousPatterns = [
                /<script[^>]*>.*?<\/script>/gi,
                /javascript:/gi,
                /vbscript:/gi,
                /on\w+\s*=/gi,
                /<iframe/gi,
                /<object/gi,
                /<embed/gi,
                /<form/gi,
                /eval\s*\(/gi,
                /expression\s*\(/gi
            ];

            // Function to check for dangerous input
            function containsDangerousInput(text) {
                if (!text) return false;
                return dangerousPatterns.some(pattern => pattern.test(text));
            }

            // Character count functions
            function updateCharCount(input, countElement, maxLength) {
                const currentLength = input.val().length;
                countElement.text(currentLength);
                countElement.removeClass('text-warning text-danger');
                const warningThreshold = maxLength * 0.8;
                if (currentLength > warningThreshold && currentLength < maxLength) {
                    countElement.addClass('text-warning');
                } else if (currentLength >= maxLength) {
                    countElement.addClass('text-danger');
                }
            }

            // Validation functions
            function validateDepartmentName() {
                const deptName = deptNameInput.val().trim();
                const validationSpan = $('#deptNameValidation');
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                deptNameInput.removeClass('is-invalid');

                if (!deptName) {
                    validationSpan.text('Department Name is required.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    deptNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (deptName.length < 2) {
                    validationSpan.text('Department Name must be at least 2 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    deptNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (deptName.length > 120) {
                    validationSpan.text('Department Name cannot exceed 120 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    deptNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(deptName)) {
                    validationSpan.text('Department Name contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    deptNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\s\-_\.\(\)\[\]]+$/.test(deptName)) {
                    validationSpan.text('Department Name can only contain letters, numbers, spaces, hyphens, underscores, dots, parentheses, and brackets.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    deptNameInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            function validateDescription() {
                const description = dptDescTextarea.val();
                const validationSpan = $('#deptDescValidation');
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                dptDescTextarea.removeClass('is-invalid');

                if (description && description.length > 250) {
                    validationSpan.text('Description cannot exceed 250 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    dptDescTextarea.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(description)) {
                    validationSpan.text('Description contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    dptDescTextarea.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            function validateRemarks() {
                const remarks = remarksTextarea.val();
                const validationSpan = $('#remarksValidation');
                let isValid = true;

                validationSpan.text('').removeClass('field-validation-error').hide();
                remarksTextarea.removeClass('is-invalid');

                if (remarks && remarks.length > 250) {
                    validationSpan.text('Remarks cannot exceed 250 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    remarksTextarea.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(remarks)) {
                    validationSpan.text('Remarks contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    remarksTextarea.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            // Real-time validation for department name uniqueness
            function checkDepartmentNameUniqueness() {
                const deptName = deptNameInput.val().trim();
                const validationSpan = $('#deptNameValidation');

                if (!deptName || !validateDepartmentName()) {
                    updateSubmitButton();
                    return;
                }

                if (isCheckingName) return;

                isCheckingName = true;
                submitBtn.prop('disabled', true);

                const checkUrl = $('#checkUrlHidden').val();
                $.post(checkUrl, {
                    deptName: deptName,
                    deptId: deptId || null
                })
                .done(function(response) {
                    if (response.exists) {
                        validationSpan.text('A department with this name already exists. Please choose a different name.')
                                     .addClass('field-validation-error text-danger')
                                     .show();
                        deptNameInput.addClass('is-invalid');
                        submitBtn.prop('disabled', true);
                    } else {
                        if (validateDepartmentName()) {
                            validationSpan.text('').removeClass('field-validation-error').hide();
                            deptNameInput.removeClass('is-invalid');
                        }
                        updateSubmitButton();
                    }
                })
                .fail(function() {
                    console.log('Error checking department name uniqueness');
                    updateSubmitButton();
                })
                .always(function() {
                    isCheckingName = false;
                });
            }

            function updateSubmitButton() {
                const hasErrors = $('.field-validation-error:visible').length > 0 ||
                                $('.is-invalid').length > 0 ||
                                isCheckingName;
                submitBtn.prop('disabled', hasErrors);
            }

            // Event handlers
            deptNameInput.on('input keyup paste', function() {
                updateCharCount($(this), deptNameCharCount, 120);
                validateDepartmentName();
                updateSubmitButton();
            });

            dptDescTextarea.on('input keyup paste', function() {
                updateCharCount($(this), charCount, 250);
                validateDescription();
                updateSubmitButton();
            });

            remarksTextarea.on('input keyup paste', function() {
                updateCharCount($(this), remarksCharCount, 250);
                validateRemarks();
                updateSubmitButton();
            });

            // Debounced department name uniqueness check
            let nameCheckTimeout;
            deptNameInput.on('input keyup', function() {
                clearTimeout(nameCheckTimeout);
                nameCheckTimeout = setTimeout(checkDepartmentNameUniqueness, 500);
            });

            // Initialize on page load
            updateCharCount(deptNameInput, deptNameCharCount, 120);
            updateCharCount(dptDescTextarea, charCount, 250);
            updateCharCount(remarksTextarea, remarksCharCount, 250);
            validateDepartmentName();
            validateDescription();
            validateRemarks();
            updateSubmitButton();

            // Prevent form submission if validation fails
            form.on('submit', function(e) {
                if (!validateDepartmentName() || !validateDescription() || !validateRemarks() || isCheckingName) {
                    e.preventDefault();
                    return false;
                }

                // Final check for any visible errors
                if ($('.field-validation-error:visible').length > 0) {
                    e.preventDefault();
                    return false;
                }

                // Double-check for dangerous input before submission
                const deptName = deptNameInput.val().trim();
                const description = dptDescTextarea.val();
                const remarks = remarksTextarea.val();

                if (containsDangerousInput(deptName) || containsDangerousInput(description) || containsDangerousInput(remarks)) {
                    e.preventDefault();
                    alert('Invalid input detected. Please remove any script tags or unsafe characters.');
                    return false;
                }
            });

            // Prevent pasting of dangerous content
            function handleDangerousPaste(input, inputName) {
                input.on('paste', function(e) {
                    setTimeout(function() {
                        const pastedContent = input.val();
                        if (containsDangerousInput(pastedContent)) {
                            input.val('');
                            alert('Pasted content in ' + inputName + ' contains unsafe characters and has been removed.');
                        }
                    }, 10);
                });
            }

            handleDangerousPaste(deptNameInput, 'Department Name');
            handleDangerousPaste(dptDescTextarea, 'Description');
            handleDangerousPaste(remarksTextarea, 'Remarks');
        });
    </script>
}