@model EMS.WebApp.Data.SysRole
@if (ViewBag.Error != null)
{
    <div class="alert alert-warning">
        @ViewBag.Error
    </div>
}
<form asp-action="@(Model.role_id == 0 ? "Create" : "Edit")" method="post" id="sysRoleForm">
    @Html.AntiForgeryToken()
    <input asp-for="role_id" type="hidden" />
    <div class="row mb-3">
        <div class="col-md-12">
            <label asp-for="role_name" class="form-label">Role Name</label>
            <input asp-for="role_name" class="form-control glass rounded-2" id="roleNameInput" maxlength="40" />
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="role_name" class="text-danger" id="roleNameValidation"></span>
                <small class="text-muted">
                    <span id="roleNameCharCount">2</span>/40 characters
                </small>
            </div>
        </div>
        <div class="col-md-12">
            <label asp-for="role_desc" class="form-label">Description</label>
            <textarea asp-for="role_desc" class="form-control glass rounded-2" rows="3" id="roleDescTextarea" maxlength="250"></textarea>
            <div class="d-flex justify-content-between mt-1">
                <span asp-validation-for="role_desc" class="text-danger" id="roleDescValidation"></span>
                <small class="text-muted">
                    <span id="charCount">0</span>/250 characters
                </small>
            </div>
        </div>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary" id="submitBtn">
            @(Model.role_id == 0 ? "Save" : "Update")
        </button>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function() {
            const textarea = $('#roleDescTextarea');
            const roleNameInput = $('#roleNameInput');
            const charCount = $('#charCount');
            const roleNameCharCount = $('#roleNameCharCount');
            const form = $('#sysRoleForm');
            const submitBtn = $('#submitBtn');
            const roleId = $('input[name="role_id"]').val();
            let isCheckingName = false;

            // Initialize validation
            form.removeData("validator");
            form.removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);

            // Security patterns to check for
            const dangerousPatterns = [
                /<script[^>]*>.*?<\/script>/gi,
                /javascript:/gi,
                /vbscript:/gi,
                /on\w+\s*=/gi,
                /<iframe/gi,
                /<object/gi,
                /<embed/gi,
                /<form/gi,
                /eval\s*\(/gi,
                /expression\s*\(/gi
            ];

            // Function to check for dangerous input
            function containsDangerousInput(text) {
                if (!text) return false;
                return dangerousPatterns.some(pattern => pattern.test(text));
            }

            // Function to update character count for role name
            function updateRoleNameCharCount() {
                const currentLength = roleNameInput.val().length;
                roleNameCharCount.text(currentLength);

                // Visual feedback
                roleNameCharCount.removeClass('text-warning text-danger');
                if (currentLength > 30 && currentLength < 40) {
                    roleNameCharCount.addClass('text-warning');
                } else if (currentLength >= 40) {
                    roleNameCharCount.addClass('text-danger');
                }
            }

            // Function to update character count for description
            function updateCharCount() {
                const currentLength = textarea.val().length;
                charCount.text(currentLength);

                // Visual feedback
                charCount.removeClass('text-warning text-danger');
                if (currentLength > 200 && currentLength < 250) {
                    charCount.addClass('text-warning');
                } else if (currentLength >= 250) {
                    charCount.addClass('text-danger');
                }
            }

            // Real-time validation for role name
            function validateRoleName() {
                const roleName = roleNameInput.val().trim();
                const validationSpan = $('#roleNameValidation');
                let isValid = true;

                // Clear previous validations
                validationSpan.text('').removeClass('field-validation-error').hide();
                roleNameInput.removeClass('is-invalid');

                if (!roleName) {
                    validationSpan.text('Role Name is required.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    roleNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (roleName.length < 2) {
                    validationSpan.text('Role Name must be at least 2 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    roleNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (roleName.length > 40) {
                    validationSpan.text('Role Name cannot exceed 40 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    roleNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(roleName)) {
                    validationSpan.text('Role Name contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    roleNameInput.addClass('is-invalid');
                    isValid = false;
                } else if (!/^[a-zA-Z0-9\s\-_\.]+$/.test(roleName)) {
                    validationSpan.text('Role Name can only contain letters, numbers, spaces, hyphens, underscores, and dots.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    roleNameInput.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            // Real-time validation for description
            function validateDescription() {
                const description = textarea.val();
                const validationSpan = $('#roleDescValidation');
                let isValid = true;

                // Clear previous validations
                validationSpan.text('').removeClass('field-validation-error').hide();
                textarea.removeClass('is-invalid');

                if (description && description.length > 250) {
                    validationSpan.text('Description cannot exceed 250 characters.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    textarea.addClass('is-invalid');
                    isValid = false;
                } else if (containsDangerousInput(description)) {
                    validationSpan.text('Description contains invalid characters. Script tags and unsafe characters are not allowed.')
                                 .addClass('field-validation-error text-danger')
                                 .show();
                    textarea.addClass('is-invalid');
                    isValid = false;
                }

                return isValid;
            }

            // Real-time validation for role name uniqueness
            function checkRoleNameUniqueness() {
                const roleName = roleNameInput.val().trim();
                const validationSpan = $('#roleNameValidation');

                if (!roleName || !validateRoleName()) {
                    updateSubmitButton();
                    return;
                }

                if (isCheckingName) return;

                isCheckingName = true;
                submitBtn.prop('disabled', true);

                $.post('@Url.Action("CheckRoleNameExists")', {
                    roleName: roleName,
                    roleId: roleId || null
                })
                .done(function(response) {
                    if (response.exists) {
                        validationSpan.text('A role with this name already exists. Please choose a different name.')
                                     .addClass('field-validation-error text-danger')
                                     .show();
                        roleNameInput.addClass('is-invalid');
                        submitBtn.prop('disabled', true);
                    } else {
                        // Only clear if no other validation errors
                        if (validateRoleName()) {
                            validationSpan.text('').removeClass('field-validation-error').hide();
                            roleNameInput.removeClass('is-invalid');
                        }
                        updateSubmitButton();
                    }
                })
                .fail(function() {
                    // On error, allow form submission (server will handle validation)
                    console.log('Error checking role name uniqueness');
                    updateSubmitButton();
                })
                .always(function() {
                    isCheckingName = false;
                });
            }

            function updateSubmitButton() {
                const hasErrors = $('.field-validation-error:visible').length > 0 ||
                                $('.is-invalid').length > 0 ||
                                isCheckingName;
                submitBtn.prop('disabled', hasErrors);
            }

            // Event handlers
            roleNameInput.on('input keyup paste', function() {
                updateRoleNameCharCount();
                validateRoleName();
                updateSubmitButton();
            });

            // Debounced role name check
            let nameCheckTimeout;
            roleNameInput.on('input keyup', function() {
                clearTimeout(nameCheckTimeout);
                nameCheckTimeout = setTimeout(checkRoleNameUniqueness, 800);
            });

            // Description validation
            textarea.on('input keyup paste', function() {
                updateCharCount();
                validateDescription();
                updateSubmitButton();
            });

            // Initialize on page load
            updateRoleNameCharCount();
            updateCharCount();
            validateRoleName();
            validateDescription();
            updateSubmitButton();

            // Prevent form submission if validation fails
            form.on('submit', function(e) {
                if (!validateRoleName() || !validateDescription() || isCheckingName) {
                    e.preventDefault();
                    return false;
                }

                // Final check for any visible errors
                if ($('.field-validation-error:visible').length > 0) {
                    e.preventDefault();
                    return false;
                }

                // Double-check for dangerous input before submission
                const roleName = roleNameInput.val().trim();
                const description = textarea.val();

                if (containsDangerousInput(roleName) || containsDangerousInput(description)) {
                    e.preventDefault();
                    alert('Invalid input detected. Please remove any script tags or unsafe characters.');
                    return false;
                }
            });

            // Prevent pasting of dangerous content
            roleNameInput.on('paste', function(e) {
                setTimeout(function() {
                    const pastedContent = roleNameInput.val();
                    if (containsDangerousInput(pastedContent)) {
                        roleNameInput.val('');
                        alert('Pasted content contains unsafe characters and has been removed.');
                    }
                }, 10);
            });

            textarea.on('paste', function(e) {
                setTimeout(function() {
                    const pastedContent = textarea.val();
                    if (containsDangerousInput(pastedContent)) {
                        textarea.val('');
                        alert('Pasted content contains unsafe characters and has been removed.');
                    }
                }, 10);
            });
        });
    </script>
}