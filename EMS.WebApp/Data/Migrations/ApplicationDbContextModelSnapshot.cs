// <auto-generated />
using System;
using EMS.WebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EMS.WebApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EMS.WebApp.Data.AccountLogin", b =>
                {
                    b.Property<int>("login_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("login_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("login_id"));

                    b.Property<string>("SessionToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenIssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("password")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("password");

                    b.Property<string>("user_name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("user_name");

                    b.HasKey("login_id");

                    b.ToTable("account_login", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.CompounderIndent", b =>
                {
                    b.Property<int>("IndentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("indent_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndentId"));

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("approved_date");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comments");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("IndentDate")
                        .HasColumnType("date")
                        .HasColumnName("indent_date");

                    b.Property<string>("IndentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("indent_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.HasKey("IndentId");

                    b.ToTable("compounder_indent", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.CompounderIndentItem", b =>
                {
                    b.Property<int>("IndentItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("indent_item_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndentItemId"));

                    b.Property<string>("BatchNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("batch_no");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiry_date");

                    b.Property<int>("IndentId")
                        .HasColumnType("int")
                        .HasColumnName("indent_id");

                    b.Property<int>("MedItemId")
                        .HasColumnType("int")
                        .HasColumnName("med_item_id");

                    b.Property<int>("RaisedQuantity")
                        .HasColumnType("int")
                        .HasColumnName("raised_quantity");

                    b.Property<int>("ReceivedQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("received_quantity");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("unit_price");

                    b.Property<string>("VendorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("vendor_code");

                    b.HasKey("IndentItemId");

                    b.HasIndex("MedItemId");

                    b.HasIndex("IndentId", "MedItemId")
                        .IsUnique()
                        .HasDatabaseName("IX_CompounderIndentItem_IndentIdMedItemId_Unique");

                    b.HasIndex("IndentId", "VendorCode")
                        .IsUnique()
                        .HasDatabaseName("IX_CompounderIndentItem_IndentIdVendorCode_Unique");

                    b.ToTable("compounder_indent_item", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.HrEmployee", b =>
                {
                    b.Property<int>("emp_uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("emp_uid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("emp_uid"));

                    b.Property<short>("dept_id")
                        .HasColumnType("smallint")
                        .HasColumnName("dept_id");

                    b.Property<DateOnly?>("emp_DOB")
                        .HasColumnType("date")
                        .HasColumnName("emp_DOB");

                    b.Property<string>("emp_Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("emp_Gender")
                        .IsFixedLength();

                    b.Property<string>("emp_Grade")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("emp_Grade");

                    b.Property<string>("emp_blood_Group")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("emp_blood_Group");

                    b.Property<string>("emp_id")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("emp_id");

                    b.Property<string>("emp_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("emp_name");

                    b.Property<short>("plant_id")
                        .HasColumnType("smallint")
                        .HasColumnName("plant_id");

                    b.HasKey("emp_uid");

                    b.HasIndex("dept_id");

                    b.HasIndex("emp_id")
                        .IsUnique()
                        .HasDatabaseName("IX_HrEmployee_EmpId_Unique");

                    b.HasIndex("plant_id");

                    b.ToTable("hr_employee", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.HrEmployeeDependent", b =>
                {
                    b.Property<int>("emp_dep_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("emp_dep_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("emp_dep_id"));

                    b.Property<DateOnly?>("dep_dob")
                        .HasColumnType("date")
                        .HasColumnName("dep_dob");

                    b.Property<string>("dep_name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("dep_name");

                    b.Property<int>("emp_uid")
                        .HasColumnType("int")
                        .HasColumnName("emp_uid");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("gender")
                        .IsFixedLength();

                    b.Property<bool>("is_active")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("marital_status")
                        .HasColumnType("bit")
                        .HasColumnName("marital_status");

                    b.Property<string>("relation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("relation");

                    b.HasKey("emp_dep_id");

                    b.HasIndex("emp_uid");

                    b.ToTable("hr_employee_dependent", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedBase", b =>
                {
                    b.Property<int>("BaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("base_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BaseId"));

                    b.Property<string>("BaseDesc")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("base_desc");

                    b.Property<string>("BaseName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("base_name");

                    b.HasKey("BaseId");

                    b.HasIndex("BaseName")
                        .IsUnique()
                        .HasDatabaseName("IX_MedBase_BaseName_Unique");

                    b.ToTable("med_base", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedCategory", b =>
                {
                    b.Property<int>("MedCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("medcat_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedCatId"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<string>("MedCatName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("medcat_name");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("remarks");

                    b.HasKey("MedCatId");

                    b.HasIndex("MedCatName")
                        .IsUnique()
                        .HasDatabaseName("IX_MedCategory_MedCatName_Unique");

                    b.ToTable("med_category", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedDiagnosis", b =>
                {
                    b.Property<int>("diag_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("diag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("diag_id"));

                    b.Property<string>("diag_desc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("diag_desc");

                    b.Property<string>("diag_name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("diag_name");

                    b.HasKey("diag_id");

                    b.HasIndex("diag_name")
                        .IsUnique()
                        .HasDatabaseName("IX_MedDiagnosis_DiagName_Unique");

                    b.ToTable("med_diagnosis", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedDisease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("disease_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiseaseId"));

                    b.Property<string>("DiseaseDesc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("disease_desc");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("disease_name");

                    b.HasKey("DiseaseId");

                    b.HasIndex("DiseaseName")
                        .IsUnique()
                        .HasDatabaseName("IX_MedDisease_DiseaseName_Unique");

                    b.ToTable("med_disease", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedExamCategory", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cat_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatId"));

                    b.Property<string>("AnnuallyRule")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("annually_rule");

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cat_name");

                    b.Property<string>("MonthsSched")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("months_sched");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("remarks");

                    b.Property<byte>("YearsFreq")
                        .HasColumnType("tinyint")
                        .HasColumnName("years_freq");

                    b.HasKey("CatId");

                    b.HasIndex("CatName", "YearsFreq", "AnnuallyRule", "MonthsSched")
                        .IsUnique()
                        .HasDatabaseName("IX_MedExamCategory_CatNameYearsFreqAnnuallyRuleMonthsSched_Unique");

                    b.ToTable("med_exam_category", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedExamCondition", b =>
                {
                    b.Property<int>("exam_condition_uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exam_condition_uid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("exam_condition_uid"));

                    b.Property<int>("cond_uid")
                        .HasColumnType("int")
                        .HasColumnName("cond_uid");

                    b.Property<int>("exam_id")
                        .HasColumnType("int")
                        .HasColumnName("exam_id");

                    b.Property<bool>("present")
                        .HasColumnType("bit")
                        .HasColumnName("present");

                    b.HasKey("exam_condition_uid");

                    b.HasIndex("cond_uid");

                    b.HasIndex("exam_id");

                    b.ToTable("med_exam_condition", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedExamHeader", b =>
                {
                    b.Property<int>("exam_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exam_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("exam_id"));

                    b.Property<int>("emp_uid")
                        .HasColumnType("int")
                        .HasColumnName("emp_uid");

                    b.Property<DateOnly?>("exam_date")
                        .HasColumnType("date")
                        .HasColumnName("exam_date");

                    b.Property<string>("food_habit")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("food_habit");

                    b.HasKey("exam_id");

                    b.HasIndex("emp_uid");

                    b.ToTable("med_exam_header", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedExamWorkArea", b =>
                {
                    b.Property<int>("work_area_uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("work_area_uid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("work_area_uid"));

                    b.Property<int>("area_uid")
                        .HasColumnType("int")
                        .HasColumnName("area_uid");

                    b.Property<int>("exam_id")
                        .HasColumnType("int")
                        .HasColumnName("exam_id");

                    b.HasKey("work_area_uid");

                    b.HasIndex("area_uid");

                    b.HasIndex("exam_id");

                    b.ToTable("med_exam_work_area", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedGeneralExam", b =>
                {
                    b.Property<int>("general_exam_uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("general_exam_uid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("general_exam_uid"));

                    b.Property<string>("abdomen")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("abdomen");

                    b.Property<decimal?>("bmi")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("bmi");

                    b.Property<string>("bp")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("bp");

                    b.Property<string>("cns")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cns");

                    b.Property<string>("cvs")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cvs");

                    b.Property<int>("emp_uid")
                        .HasColumnType("int")
                        .HasColumnName("emp_uid");

                    b.Property<string>("ent")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ent");

                    b.Property<int>("exam_id")
                        .HasColumnType("int")
                        .HasColumnName("exam_id");

                    b.Property<string>("genito_urinary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("genito_urinary");

                    b.Property<short?>("height_cm")
                        .HasColumnType("smallint")
                        .HasColumnName("height_cm");

                    b.Property<string>("opthal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("opthal");

                    b.Property<string>("others")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("others");

                    b.Property<string>("pulse")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("pulse");

                    b.Property<string>("remarks")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("remarks");

                    b.Property<string>("respiratory")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("respiratory");

                    b.Property<string>("rr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("rr");

                    b.Property<string>("skin")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("skin");

                    b.Property<short?>("weight_kg")
                        .HasColumnType("smallint")
                        .HasColumnName("weight_kg");

                    b.HasKey("general_exam_uid");

                    b.HasIndex("emp_uid");

                    b.HasIndex("exam_id");

                    b.ToTable("med_general_exam", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedMaster", b =>
                {
                    b.Property<int>("MedItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("med_item_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedItemId"));

                    b.Property<int?>("BaseId")
                        .HasColumnType("int")
                        .HasColumnName("base_id");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("company_name");

                    b.Property<string>("MedItemName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("med_item_name");

                    b.Property<int>("ReorderLimit")
                        .HasColumnType("int")
                        .HasColumnName("reorder_limit");

                    b.HasKey("MedItemId");

                    b.HasIndex("BaseId");

                    b.HasIndex("MedItemName", "BaseId", "CompanyName")
                        .IsUnique()
                        .HasDatabaseName("IX_MedMaster_MedItemNameBaseIdCompanyName_Unique")
                        .HasFilter("[base_id] IS NOT NULL AND [company_name] IS NOT NULL");

                    b.ToTable("med_master", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedPrescriptionDisease", b =>
                {
                    b.Property<int>("PrescriptionDiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionDiseaseId"));

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionDiseaseId");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("PrescriptionId", "DiseaseId")
                        .IsUnique()
                        .HasDatabaseName("IX_MedPrescriptionDisease_PrescriptionIdDiseaseId_Unique");

                    b.ToTable("med_prescription_disease", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedPrescriptionMedicine", b =>
                {
                    b.Property<int>("PrescriptionMedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionMedicineId"));

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Instructions")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MedItemId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionMedicineId");

                    b.HasIndex("MedItemId");

                    b.HasIndex("PrescriptionId", "MedItemId")
                        .IsUnique()
                        .HasDatabaseName("IX_MedPrescriptionMedicine_PrescriptionIdMedItemId_Unique");

                    b.ToTable("med_prescription_medicine", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedRefHospital", b =>
                {
                    b.Property<int>("hosp_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("hosp_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("hosp_id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("contact_person_email_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contact_person_email_id");

                    b.Property<string>("contact_person_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contact_person_name");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("hosp_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("hosp_code");

                    b.Property<string>("hosp_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("hosp_name");

                    b.Property<long?>("mobile_number_1")
                        .HasColumnType("bigint")
                        .HasColumnName("mobile_number_1");

                    b.Property<long?>("mobile_number_2")
                        .HasColumnType("bigint")
                        .HasColumnName("mobile_number_2");

                    b.Property<long?>("phone_number_1")
                        .HasColumnType("bigint")
                        .HasColumnName("phone_number_1");

                    b.Property<long?>("phone_number_2")
                        .HasColumnType("bigint")
                        .HasColumnName("phone_number_2");

                    b.Property<string>("speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("speciality");

                    b.Property<string>("tax_category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tax_category");

                    b.Property<string>("vendor_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("vendor_code");

                    b.Property<string>("vendor_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("vendor_name");

                    b.HasKey("hosp_id");

                    b.HasIndex("hosp_name", "hosp_code")
                        .IsUnique()
                        .HasDatabaseName("IX_MedRefHospital_HospNameCode_Unique");

                    b.ToTable("med_ref_hospital", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedWorkHistory", b =>
                {
                    b.Property<int>("work_uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("work_uid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("work_uid"));

                    b.Property<int>("emp_uid")
                        .HasColumnType("int")
                        .HasColumnName("emp_uid");

                    b.Property<int>("exam_id")
                        .HasColumnType("int")
                        .HasColumnName("exam_id");

                    b.Property<string>("job_injuries")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("job_injuries");

                    b.Property<string>("job_name")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("job_name");

                    b.Property<string>("ppe")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ppe");

                    b.Property<string>("work_env")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("work_env");

                    b.Property<decimal?>("years_in_job")
                        .HasColumnType("decimal(4,1)")
                        .HasColumnName("years_in_job");

                    b.HasKey("work_uid");

                    b.HasIndex("emp_uid");

                    b.HasIndex("exam_id");

                    b.ToTable("med_work_history", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.Migrations.MedPrescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Approved");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pulse")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Temperature")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("emp_uid")
                        .HasColumnType("int");

                    b.Property<int>("exam_id")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("ApprovalStatus")
                        .HasDatabaseName("IX_MedPrescription_ApprovalStatus");

                    b.HasIndex("emp_uid");

                    b.HasIndex("exam_id");

                    b.ToTable("med_prescription", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.OtherPatient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OtherDetails")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TreatmentId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PatientId");

                    b.HasIndex("TreatmentId")
                        .IsUnique()
                        .HasDatabaseName("IX_OtherPatient_TreatmentId_Unique");

                    b.ToTable("other_patient", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.OthersDiagnosis", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisId"));

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PulseRate")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Sugar")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiagnosisId");

                    b.HasIndex("PatientId");

                    b.ToTable("others_diagnosis", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.OthersDiagnosisDisease", b =>
                {
                    b.Property<int>("DiagnosisDiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisDiseaseId"));

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.HasKey("DiagnosisDiseaseId");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("DiagnosisId", "DiseaseId")
                        .IsUnique()
                        .HasDatabaseName("IX_OthersDiagnosisDisease_DiagnosisIdDiseaseId_Unique");

                    b.ToTable("others_diagnosis_disease", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.OthersDiagnosisMedicine", b =>
                {
                    b.Property<int>("DiagnosisMedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisMedicineId"));

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Instructions")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MedItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DiagnosisMedicineId");

                    b.HasIndex("MedItemId");

                    b.HasIndex("DiagnosisId", "MedItemId")
                        .IsUnique()
                        .HasDatabaseName("IX_OthersDiagnosisMedicine_DiagnosisIdMedItemId_Unique");

                    b.ToTable("others_diagnosis_medicine", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.RefMedCondition", b =>
                {
                    b.Property<int>("cond_uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cond_uid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cond_uid"));

                    b.Property<string>("cond_code")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("cond_code");

                    b.Property<string>("cond_desc")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("cond_desc");

                    b.HasKey("cond_uid");

                    b.ToTable("ref_med_condition", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.RefWorkArea", b =>
                {
                    b.Property<int>("area_uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("area_uid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("area_uid"));

                    b.Property<string>("area_code")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("area_code");

                    b.Property<string>("area_desc")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("area_desc");

                    b.HasKey("area_uid");

                    b.ToTable("ref_work_area", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.StoreIndent", b =>
                {
                    b.Property<int>("IndentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("indent_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndentId"));

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("approved_date");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comments");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("IndentDate")
                        .HasColumnType("date")
                        .HasColumnName("indent_date");

                    b.Property<string>("IndentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("indent_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.HasKey("IndentId");

                    b.ToTable("store_indent", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.StoreIndentItem", b =>
                {
                    b.Property<int>("IndentItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("indent_item_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndentItemId"));

                    b.Property<string>("BatchNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("batch_no");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiry_date");

                    b.Property<int>("IndentId")
                        .HasColumnType("int")
                        .HasColumnName("indent_id");

                    b.Property<int>("MedItemId")
                        .HasColumnType("int")
                        .HasColumnName("med_item_id");

                    b.Property<int>("RaisedQuantity")
                        .HasColumnType("int")
                        .HasColumnName("raised_quantity");

                    b.Property<int>("ReceivedQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("received_quantity");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("unit_price");

                    b.Property<string>("VendorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("vendor_code");

                    b.HasKey("IndentItemId");

                    b.HasIndex("MedItemId");

                    b.HasIndex("IndentId", "MedItemId")
                        .IsUnique()
                        .HasDatabaseName("IX_StoreIndentItem_IndentIdMedItemId_Unique");

                    b.HasIndex("IndentId", "VendorCode")
                        .IsUnique()
                        .HasDatabaseName("IX_StoreIndentItem_IndentIdVendorCode_Unique");

                    b.ToTable("store_indent_item", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.SysAttachScreenRole", b =>
                {
                    b.Property<int>("uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("uid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("uid"));

                    b.Property<int>("role_uid")
                        .HasColumnType("int")
                        .HasColumnName("role_uid");

                    b.Property<string>("screen_uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("screen_uid");

                    b.HasKey("uid");

                    b.HasIndex("role_uid")
                        .IsUnique();

                    b.ToTable("sys_attach_screen_role", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.SysRole", b =>
                {
                    b.Property<int>("role_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("role_id"));

                    b.Property<string>("role_desc")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("role_desc");

                    b.Property<string>("role_name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("role_name");

                    b.HasKey("role_id");

                    b.HasIndex("role_name")
                        .IsUnique()
                        .HasDatabaseName("IX_SysRole_RoleName_Unique");

                    b.ToTable("sys_role", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.SysUser", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<string>("adid")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("adid");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("email");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("full_name");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("role_id")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("user_id");

                    b.HasIndex("role_id");

                    b.ToTable("sys_user", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.med_ambulance_master", b =>
                {
                    b.Property<int>("amb_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("amb_id"));

                    b.Property<bool>("is_active")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<byte>("max_capacity")
                        .HasColumnType("tinyint")
                        .HasColumnName("max_capacity");

                    b.Property<string>("provider")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("provider");

                    b.Property<string>("vehicle_no")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("vehicle_no");

                    b.Property<string>("vehicle_type")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("vehicle_type");

                    b.HasKey("amb_id")
                        .HasName("PK__med_ambu__9FDA4AE611BCF6CF");

                    b.HasIndex("vehicle_no")
                        .IsUnique()
                        .HasDatabaseName("IX_MedAmbulanceMaster_VehicleNo_Unique");

                    b.ToTable("med_ambulance_master", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.org_department", b =>
                {
                    b.Property<short>("dept_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("dept_id"));

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("dept_description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("dept_name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("dept_id")
                        .HasName("PK__org_depa__DCA65974896CEDB8");

                    b.HasIndex("dept_name")
                        .IsUnique()
                        .HasDatabaseName("IX_OrgDepartment_DeptName_Unique");

                    b.ToTable("org_department", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.org_plant", b =>
                {
                    b.Property<short>("plant_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("plant_id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Description");

                    b.Property<string>("plant_code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("plant_code");

                    b.Property<string>("plant_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("plant_id")
                        .HasName("PK__org_plan__A576B3B47C5A3448");

                    b.HasIndex("plant_code")
                        .IsUnique()
                        .HasDatabaseName("IX_OrgPlant_PlantCode_Unique");

                    b.ToTable("org_plant", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.sys_screen_name", b =>
                {
                    b.Property<int>("screen_uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("screen_uid"));

                    b.Property<string>("screen_description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("screen_name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("screen_uid")
                        .HasName("PK__sys_scre__B2C9B83A098D0056");

                    b.ToTable("sys_screen_name", (string)null);
                });

            modelBuilder.Entity("EMS.WebApp.Data.CompounderIndentItem", b =>
                {
                    b.HasOne("EMS.WebApp.Data.CompounderIndent", "CompounderIndent")
                        .WithMany("CompounderIndentItems")
                        .HasForeignKey("IndentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.WebApp.Data.MedMaster", "MedMaster")
                        .WithMany()
                        .HasForeignKey("MedItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CompounderIndent");

                    b.Navigation("MedMaster");
                });

            modelBuilder.Entity("EMS.WebApp.Data.HrEmployee", b =>
                {
                    b.HasOne("EMS.WebApp.Data.org_department", "org_department")
                        .WithMany("HrEmployees")
                        .HasForeignKey("dept_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.WebApp.Data.org_plant", "org_plant")
                        .WithMany("HrEmployees")
                        .HasForeignKey("plant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("org_department");

                    b.Navigation("org_plant");
                });

            modelBuilder.Entity("EMS.WebApp.Data.HrEmployeeDependent", b =>
                {
                    b.HasOne("EMS.WebApp.Data.HrEmployee", "HrEmployee")
                        .WithMany("HrEmployeeDependents")
                        .HasForeignKey("emp_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HrEmployee");
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedExamCondition", b =>
                {
                    b.HasOne("EMS.WebApp.Data.RefMedCondition", "RefMedCondition")
                        .WithMany("MedExamConditions")
                        .HasForeignKey("cond_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.WebApp.Data.MedExamHeader", "MedExamHeader")
                        .WithMany("MedExamConditions")
                        .HasForeignKey("exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedExamHeader");

                    b.Navigation("RefMedCondition");
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedExamHeader", b =>
                {
                    b.HasOne("EMS.WebApp.Data.HrEmployee", "HrEmployee")
                        .WithMany("MedExamHeaders")
                        .HasForeignKey("emp_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HrEmployee");
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedExamWorkArea", b =>
                {
                    b.HasOne("EMS.WebApp.Data.RefWorkArea", "RefWorkArea")
                        .WithMany("MedExamWorkAreas")
                        .HasForeignKey("area_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.WebApp.Data.MedExamHeader", "MedExamHeader")
                        .WithMany("MedExamWorkAreas")
                        .HasForeignKey("exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedExamHeader");

                    b.Navigation("RefWorkArea");
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedGeneralExam", b =>
                {
                    b.HasOne("EMS.WebApp.Data.HrEmployee", "HrEmployee")
                        .WithMany("MedGeneralExams")
                        .HasForeignKey("emp_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.WebApp.Data.MedExamHeader", "MedExamHeader")
                        .WithMany("MedGeneralExams")
                        .HasForeignKey("exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HrEmployee");

                    b.Navigation("MedExamHeader");
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedMaster", b =>
                {
                    b.HasOne("EMS.WebApp.Data.MedBase", "MedBase")
                        .WithMany("MedMasters")
                        .HasForeignKey("BaseId");

                    b.Navigation("MedBase");
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedPrescriptionDisease", b =>
                {
                    b.HasOne("EMS.WebApp.Data.MedDisease", "MedDisease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EMS.WebApp.Data.Migrations.MedPrescription", "MedPrescription")
                        .WithMany("PrescriptionDiseases")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedDisease");

                    b.Navigation("MedPrescription");
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedPrescriptionMedicine", b =>
                {
                    b.HasOne("EMS.WebApp.Data.MedMaster", "MedMaster")
                        .WithMany()
                        .HasForeignKey("MedItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EMS.WebApp.Data.Migrations.MedPrescription", "MedPrescription")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedMaster");

                    b.Navigation("MedPrescription");
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedWorkHistory", b =>
                {
                    b.HasOne("EMS.WebApp.Data.HrEmployee", "HrEmployee")
                        .WithMany("MedWorkHistories")
                        .HasForeignKey("emp_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.WebApp.Data.MedExamHeader", "MedExamHeader")
                        .WithMany("MedWorkHistories")
                        .HasForeignKey("exam_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HrEmployee");

                    b.Navigation("MedExamHeader");
                });

            modelBuilder.Entity("EMS.WebApp.Data.Migrations.MedPrescription", b =>
                {
                    b.HasOne("EMS.WebApp.Data.HrEmployee", "HrEmployee")
                        .WithMany()
                        .HasForeignKey("emp_uid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EMS.WebApp.Data.MedExamHeader", "MedExamHeader")
                        .WithMany()
                        .HasForeignKey("exam_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HrEmployee");

                    b.Navigation("MedExamHeader");
                });

            modelBuilder.Entity("EMS.WebApp.Data.OthersDiagnosis", b =>
                {
                    b.HasOne("EMS.WebApp.Data.OtherPatient", "Patient")
                        .WithMany("Diagnoses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EMS.WebApp.Data.OthersDiagnosisDisease", b =>
                {
                    b.HasOne("EMS.WebApp.Data.OthersDiagnosis", "OthersDiagnosis")
                        .WithMany("DiagnosisDiseases")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.WebApp.Data.MedDisease", "MedDisease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MedDisease");

                    b.Navigation("OthersDiagnosis");
                });

            modelBuilder.Entity("EMS.WebApp.Data.OthersDiagnosisMedicine", b =>
                {
                    b.HasOne("EMS.WebApp.Data.OthersDiagnosis", "OthersDiagnosis")
                        .WithMany("DiagnosisMedicines")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.WebApp.Data.MedMaster", "MedMaster")
                        .WithMany()
                        .HasForeignKey("MedItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MedMaster");

                    b.Navigation("OthersDiagnosis");
                });

            modelBuilder.Entity("EMS.WebApp.Data.StoreIndentItem", b =>
                {
                    b.HasOne("EMS.WebApp.Data.StoreIndent", "StoreIndent")
                        .WithMany("StoreIndentItems")
                        .HasForeignKey("IndentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.WebApp.Data.MedMaster", "MedMaster")
                        .WithMany()
                        .HasForeignKey("MedItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MedMaster");

                    b.Navigation("StoreIndent");
                });

            modelBuilder.Entity("EMS.WebApp.Data.SysAttachScreenRole", b =>
                {
                    b.HasOne("EMS.WebApp.Data.SysRole", "SysRole")
                        .WithMany("SysAttachScreenRole")
                        .HasForeignKey("role_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysRole");
                });

            modelBuilder.Entity("EMS.WebApp.Data.SysUser", b =>
                {
                    b.HasOne("EMS.WebApp.Data.SysRole", "SysRole")
                        .WithMany("SysUsers")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysRole");
                });

            modelBuilder.Entity("EMS.WebApp.Data.CompounderIndent", b =>
                {
                    b.Navigation("CompounderIndentItems");
                });

            modelBuilder.Entity("EMS.WebApp.Data.HrEmployee", b =>
                {
                    b.Navigation("HrEmployeeDependents");

                    b.Navigation("MedExamHeaders");

                    b.Navigation("MedGeneralExams");

                    b.Navigation("MedWorkHistories");
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedBase", b =>
                {
                    b.Navigation("MedMasters");
                });

            modelBuilder.Entity("EMS.WebApp.Data.MedExamHeader", b =>
                {
                    b.Navigation("MedExamConditions");

                    b.Navigation("MedExamWorkAreas");

                    b.Navigation("MedGeneralExams");

                    b.Navigation("MedWorkHistories");
                });

            modelBuilder.Entity("EMS.WebApp.Data.Migrations.MedPrescription", b =>
                {
                    b.Navigation("PrescriptionDiseases");

                    b.Navigation("PrescriptionMedicines");
                });

            modelBuilder.Entity("EMS.WebApp.Data.OtherPatient", b =>
                {
                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("EMS.WebApp.Data.OthersDiagnosis", b =>
                {
                    b.Navigation("DiagnosisDiseases");

                    b.Navigation("DiagnosisMedicines");
                });

            modelBuilder.Entity("EMS.WebApp.Data.RefMedCondition", b =>
                {
                    b.Navigation("MedExamConditions");
                });

            modelBuilder.Entity("EMS.WebApp.Data.RefWorkArea", b =>
                {
                    b.Navigation("MedExamWorkAreas");
                });

            modelBuilder.Entity("EMS.WebApp.Data.StoreIndent", b =>
                {
                    b.Navigation("StoreIndentItems");
                });

            modelBuilder.Entity("EMS.WebApp.Data.SysRole", b =>
                {
                    b.Navigation("SysAttachScreenRole");

                    b.Navigation("SysUsers");
                });

            modelBuilder.Entity("EMS.WebApp.Data.org_department", b =>
                {
                    b.Navigation("HrEmployees");
                });

            modelBuilder.Entity("EMS.WebApp.Data.org_plant", b =>
                {
                    b.Navigation("HrEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
